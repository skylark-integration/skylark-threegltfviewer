/**
 * skylark-threegltfviewer - A version of threegltfviewer that ported to running on skylarkjs
 * @author Hudaokeji, Inc.
 * @version v0.9.0
 * @link https://github.com/skylark-integration/skylark-threegltfviewer/
 * @license MIT
 */
define(["skylark-threejs","./threegltviewer"],function(e,o){"use strict";const r=["attribute vec3 position;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","varying vec2 vUv;","void main() {","\tgl_Position = vec4(position, 1.0);","\tvUv = vec2(position.x, position.y) * 0.5 + 0.5;","}"].join("\n"),t=["precision mediump float;","#pragma glslify: grain = require('glsl-film-grain')","#pragma glslify: blend = require('glsl-blend-soft-light')","","uniform vec3 color1;","uniform vec3 color2;","uniform float aspect;","uniform vec2 offset;","uniform vec2 scale;","uniform float noiseAlpha;","uniform bool aspectCorrection;","uniform float grainScale;","uniform float grainTime;","uniform vec2 smooth;","","varying vec2 vUv;","","void main() {","\tvec2 q = vec2(vUv - 0.5);","\tif (aspectCorrection) {","\t\tq.x *= aspect;","\t}","\tq /= scale;","\tq -= offset;","\tfloat dst = length(q);","\tdst = smoothstep(smooth.x, smooth.y, dst);","\tvec3 color = mix(color1, color2, dst);","","\tif (noiseAlpha > 0.0 && grainScale > 0.0) {","\t\tfloat gSize = 1.0 / grainScale;","\t\tfloat g = grain(vUv, vec2(gSize * aspect, gSize), grainTime);","\t\tvec3 noiseColor = blend(color, vec3(g));","\t\tgl_FragColor.rgb = mix(color, noiseColor, noiseAlpha);","\t} else {","\t\tgl_FragColor.rgb = color;","\t}","\tgl_FragColor.a = 1.0;","}"].join("\n");return o.vignettes={createBackground:function(o){var i=(o=o||{}).geometry||new e.PlaneGeometry(2,2,1),a=new e.RawShaderMaterial({vertexShader:r,fragmentShader:t,side:e.DoubleSide,uniforms:{aspectCorrection:{type:"i",value:!1},aspect:{type:"f",value:1},grainScale:{type:"f",value:.005},grainTime:{type:"f",value:0},noiseAlpha:{type:"f",value:.25},offset:{type:"v2",value:new e.Vector2(0,0)},scale:{type:"v2",value:new e.Vector2(1,1)},smooth:{type:"v2",value:new e.Vector2(0,1)},color1:{type:"c",value:new e.Color("#fff")},color2:{type:"c",value:new e.Color("#283844")}},depthTest:!1}),n=new e.Mesh(i,a);return n.frustumCulled=!1,n.style=function(o){if(o=o||{},Array.isArray(o.colors)){var r=o.colors.map(function(o){return"string"==typeof o||"number"==typeof o?new e.Color(o):o});a.uniforms.color1.value.copy(r[0]),a.uniforms.color2.value.copy(r[1])}if("number"==typeof o.aspect&&(a.uniforms.aspect.value=o.aspect),"number"==typeof o.grainScale&&(a.uniforms.grainScale.value=o.grainScale),"number"==typeof o.grainTime&&(a.uniforms.grainTime.value=o.grainTime),o.smooth){var t=l(o.smooth,e.Vector2);a.uniforms.smooth.value.copy(t)}if(o.offset){var i=l(o.offset,e.Vector2);a.uniforms.offset.value.copy(i)}if("number"==typeof o.noiseAlpha&&(a.uniforms.noiseAlpha.value=o.noiseAlpha),void 0!==o.scale){var n=o.scale;"number"==typeof n&&(n=[n,n]),n=l(n,e.Vector2),a.uniforms.scale.value.copy(n)}void 0!==o.aspectCorrection&&(a.uniforms.aspectCorrection.value=Boolean(o.aspectCorrection))},o&&n.style(o),n;function l(e,o){return Array.isArray(e)?(new o).fromArray(e):e}}}});
//# sourceMappingURL=sourcemaps/vignettes.js.map
