/**
 * skylark-threegltfviewer - A version of threegltfviewer that ported to running on skylarkjs
 * @author Hudaokeji, Inc.
 * @version v0.9.0
 * @link https://github.com/skylark-integration/skylark-threegltfviewer/
 * @license MIT
 */
define(["skylark-langx-emitter","skylark-jszip","./threegltviewer"],function(e,t,i){return i.SimpleDropzone=class{constructor(e,t){this.el=e,this.inputEl=t,this.listeners={drop:[],dropstart:[],droperror:[]},this._onDragover=this._onDragover.bind(this),this._onDrop=this._onDrop.bind(this),this._onSelect=this._onSelect.bind(this),e.addEventListener("dragover",this._onDragover,!1),e.addEventListener("drop",this._onDrop,!1),t.addEventListener("change",this._onSelect)}on(e,t){return this.listeners[e].push(t),this}_emit(e,t){return this.listeners[e].forEach(e=>e(t)),this}destroy(){const e=this.el,t=this.inputEl;e.removeEventListener(this._onDragover),e.removeEventListener(this._onDrop),t.removeEventListener(this._onSelect),delete this.el,delete this.inputEl,delete this.listeners}_onDrop(e){let t;if(e.stopPropagation(),e.preventDefault(),this._emit("dropstart"),e.dataTransfer.items)t=[].slice.call(e.dataTransfer.items).map(e=>e.webkitGetAsEntry());else if(1===(e.dataTransfer.files||[]).length){const t=e.dataTransfer.files[0];return this._isZip(t)?void this._loadZip(t):void this._emit("drop",{files:new Map([[t.name,t]])})}t||this._fail("Required drag-and-drop APIs are not supported in this browser."),1===t.length&&t[0].name.match(/\.zip$/)?t[0].file(e=>this._loadZip(e)):this._loadNextEntry(new Map,t)}_onDragover(e){e.stopPropagation(),e.preventDefault(),e.dataTransfer.dropEffect="copy"}_onSelect(e){this._emit("dropstart");const t=[].slice.call(this.inputEl.files);if(1===t.length&&this._isZip(t[0]))return void this._loadZip(t[0]);const i=new Map;t.forEach(e=>i.set(e.name,e)),this._emit("drop",{files:i})}_loadNextEntry(e,t){const i=t.pop();if(i)if(i.isFile)i.file(s=>{e.set(i.fullPath,s),this._loadNextEntry(e,t)},()=>console.error("Could not load file: %s",i.fullPath));else if(i.isDirectory){const s=i.createReader(),r=i=>{i.length?(t=t.concat(i),s.readEntries(r)):this._loadNextEntry(e,t)};s.readEntries(r)}else console.warn("Unknown asset type: "+i.fullPath),this._loadNextEntry(e,t);else this._emit("drop",{files:e})}_loadZip(e){const t=new Map;ZipLoader.unzip(e).then(i=>{Object.keys(i.files).forEach(e=>{if(e.match(/\/$/))return;const s=e.replace(/^.*[\\\/]/,"");t.set(e,new File([i.files[e].buffer],s))}),this._emit("drop",{files:t,archive:e})})}_isZip(e){return"application/zip"===e.type||e.name.match(/\.zip$/)}_fail(e){this._emit("droperror",{message:e})}}});
//# sourceMappingURL=sourcemaps/SimpleDropzone.js.map
