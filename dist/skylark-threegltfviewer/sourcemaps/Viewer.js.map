{"version":3,"sources":["Viewer.js"],"names":["define","THREE","Stats","GLTFLoader","DRACOLoader","OrbitControls","RGBELoader","datgui","threegltviewer","environments","vignettes","DEFAULT_CAMERA","IS_IOS","test","navigator","userAgent","window","MSStream","MAP_NAMES","Preset","ASSET_GENERATOR","Cache","enabled","traverseMaterials","object","callback","traverse","node","isMesh","Array","isArray","material","forEach","Viewer","[object Object]","el","options","this","lights","content","mixer","clips","gui","state","environment","preset","find","e","id","name","background","playbackSpeed","actionStates","camera","wireframe","skeleton","grid","addLights","exposure","textureEncoding","ambientIntensity","ambientColor","directIntensity","Math","PI","directColor","bgColor1","bgColor2","prevTime","stats","dom","height","call","children","child","style","display","scene","Scene","fov","defaultCamera","PerspectiveCamera","clientWidth","clientHeight","activeCamera","add","renderer","WebGLRenderer","antialias","physicallyCorrectLights","outputEncoding","sRGBEncoding","setClearColor","setPixelRatio","devicePixelRatio","setSize","pmremGenerator","PMREMGenerator","compileEquirectangularShader","controls","domElement","autoRotate","autoRotateSpeed","screenSpacePanning","vignette","createBackground","aspect","grainScale","colors","renderOrder","appendChild","cameraCtrl","cameraFolder","animFolder","animCtrls","morphFolder","morphCtrls","skeletonHelpers","gridHelper","axesHelper","addAxesHelper","addGUI","kiosk","close","animate","bind","requestAnimationFrame","addEventListener","resize","time","dt","update","render","axesCamera","position","copy","lookAt","axesScene","axesRenderer","parentElement","updateProjectionMatrix","axesDiv","url","rootPath","assetMap","baseURL","LoaderUtils","extractUrlBase","Promise","resolve","reject","manager","LoadingManager","setURLModifier","path","normalizedURL","decodeURI","replace","has","blob","get","blobURL","URL","createObjectURL","blobURLs","push","loader","setCrossOrigin","dracoLoader","setDecoderPath","setDRACOLoader","load","gltf","scenes","animations","Error","setContent","revokeObjectURL","undefined","clear","box","Box3","setFromObject","size","getSize","Vector3","length","center","getCenter","reset","x","y","z","maxDistance","near","far","cameraPosition","fromArray","setCamera","axesCorner","scale","set","saveState","isLight","depthWrite","transparent","setClips","updateLights","updateGUI","updateEnvironment","updateTextureEncoding","updateDisplay","console","info","printGraph","group","type","groupEnd","stopAllAction","uncacheRoot","getRoot","AnimationMixer","clip","clipAction","play","isCamera","encoding","LinearEncoding","map","emissiveMap","needsUpdate","removeLights","toneMappingExposure","intensity","color","setHex","hemiLight","HemisphereLight","light1","AmbientLight","light2","DirectionalLight","light","parent","remove","filter","entry","getCubeMapTexture","then","envMap","setDataType","UnsignedByteType","texture","fromEquirectangular","dispose","helper","SkeletonHelper","bones","linewidth","Boolean","GridHelper","AxesHelper","onBeforeRender","clearDepth","document","createElement","classList","alpha","up","GUI","autoPlace","width","hideable","dispFolder","addFolder","onChange","bgColor1Ctrl","addColor","bgColor2Ctrl","updateBackground","lightFolder","sRGB","Linear","Number","env","listen","ctrl","speed","timeScale","playAll","playAllClips","perfFolder","perfLi","__ul","guiWrap","open","cameraNames","morphMeshes","morphTargetInfluences","cameraOptions","concat","mesh","nameCtrl","i","Object","keys","morphTargetDictionary","key","clipIndex","action","playAnimation","setEffectiveTimeScale","stop","geometry"],"mappings":"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","file":"../Viewer.js","sourcesContent":["define([\r\n    'skylark-threejs',\r\n    'skylark-threejs-ex/utils/stats',\r\n    'skylark-threejs-ex/loaders/GLTFLoader',\r\n    'skylark-threejs-ex/loaders/DRACOLoader',\r\n    'skylark-threejs-ex/controls/OrbitControls',\r\n    'skylark-threejs-ex/loaders/RGBELoader',\r\n    'skylark-datgui',\r\n    \"./threegltviewer\",\r\n    './environments',\r\n    './vignettes'\r\n], function (\r\n  THREE, \r\n  Stats, \r\n  GLTFLoader,\r\n  DRACOLoader, \r\n  OrbitControls, \r\n  RGBELoader, \r\n  datgui, \r\n  threegltviewer,\r\n  environments, \r\n  vignettes\r\n) {\r\n    'use strict';\r\n    const DEFAULT_CAMERA = '[default]';\r\n    const IS_IOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\r\n    const MAP_NAMES = [\r\n        'map',\r\n        'aoMap',\r\n        'emissiveMap',\r\n        'glossinessMap',\r\n        'metalnessMap',\r\n        'normalMap',\r\n        'roughnessMap',\r\n        'specularMap'\r\n    ];\r\n    const Preset = { ASSET_GENERATOR: 'assetgenerator' };\r\n    THREE.Cache.enabled = true;\r\n    class Viewer {\r\n        constructor(el, options) {\r\n            this.el = el;\r\n            this.options = options;\r\n            this.lights = [];\r\n            this.content = null;\r\n            this.mixer = null;\r\n            this.clips = [];\r\n            this.gui = null;\r\n            this.state = {\r\n                environment: options.preset === Preset.ASSET_GENERATOR ? environments.find(e => e.id === 'footprint-court').name : environments[1].name,\r\n                background: false,\r\n                playbackSpeed: 1,\r\n                actionStates: {},\r\n                camera: DEFAULT_CAMERA,\r\n                wireframe: false,\r\n                skeleton: false,\r\n                grid: false,\r\n                addLights: true,\r\n                exposure: 1,\r\n                textureEncoding: 'sRGB',\r\n                ambientIntensity: 0.3,\r\n                ambientColor: 16777215,\r\n                directIntensity: 0.8 * Math.PI,\r\n                directColor: 16777215,\r\n                bgColor1: '#ffffff',\r\n                bgColor2: '#353535'\r\n            };\r\n            this.prevTime = 0;\r\n            this.stats = new Stats();\r\n            this.stats.dom.height = '48px';\r\n            [].forEach.call(this.stats.dom.children, child => child.style.display = '');\r\n            this.scene = new THREE.Scene();\r\n            const fov = options.preset === Preset.ASSET_GENERATOR ? 0.8 * 180 / Math.PI : 60;\r\n            this.defaultCamera = new THREE.PerspectiveCamera(fov, el.clientWidth / el.clientHeight, 0.01, 1000);\r\n            this.activeCamera = this.defaultCamera;\r\n            this.scene.add(this.defaultCamera);\r\n            this.renderer = window.renderer = new THREE.WebGLRenderer({ antialias: true });\r\n            this.renderer.physicallyCorrectLights = true;\r\n            this.renderer.outputEncoding = THREE.sRGBEncoding;\r\n            this.renderer.setClearColor(13421772);\r\n            this.renderer.setPixelRatio(window.devicePixelRatio);\r\n            this.renderer.setSize(el.clientWidth, el.clientHeight);\r\n            this.pmremGenerator = new THREE.PMREMGenerator(this.renderer);\r\n            this.pmremGenerator.compileEquirectangularShader();\r\n            this.controls = new OrbitControls(this.defaultCamera, this.renderer.domElement);\r\n            this.controls.autoRotate = false;\r\n            this.controls.autoRotateSpeed = -10;\r\n            this.controls.screenSpacePanning = true;\r\n            this.vignette = vignettes.createBackground({\r\n                aspect: this.defaultCamera.aspect,\r\n                grainScale: IS_IOS ? 0 : 0.001,\r\n                colors: [\r\n                    this.state.bgColor1,\r\n                    this.state.bgColor2\r\n                ]\r\n            });\r\n            this.vignette.name = 'Vignette';\r\n            this.vignette.renderOrder = -1;\r\n            this.el.appendChild(this.renderer.domElement);\r\n            this.cameraCtrl = null;\r\n            this.cameraFolder = null;\r\n            this.animFolder = null;\r\n            this.animCtrls = [];\r\n            this.morphFolder = null;\r\n            this.morphCtrls = [];\r\n            this.skeletonHelpers = [];\r\n            this.gridHelper = null;\r\n            this.axesHelper = null;\r\n            this.addAxesHelper();\r\n            this.addGUI();\r\n            if (options.kiosk)\r\n                this.gui.close();\r\n            this.animate = this.animate.bind(this);\r\n            requestAnimationFrame(this.animate);\r\n            window.addEventListener('resize', this.resize.bind(this), false);\r\n        }\r\n\r\n        animate(time) {\r\n            requestAnimationFrame(this.animate);\r\n            const dt = (time - this.prevTime) / 1000;\r\n            this.controls.update();\r\n            this.stats.update();\r\n            this.mixer && this.mixer.update(dt);\r\n            this.render();\r\n            this.prevTime = time;\r\n        }\r\n\r\n        render() {\r\n            this.renderer.render(this.scene, this.activeCamera);\r\n            if (this.state.grid) {\r\n                this.axesCamera.position.copy(this.defaultCamera.position);\r\n                this.axesCamera.lookAt(this.axesScene.position);\r\n                this.axesRenderer.render(this.axesScene, this.axesCamera);\r\n            }\r\n        }\r\n\r\n        resize() {\r\n            const {clientHeight, clientWidth} = this.el.parentElement;\r\n            this.defaultCamera.aspect = clientWidth / clientHeight;\r\n            this.defaultCamera.updateProjectionMatrix();\r\n            this.vignette.style({ aspect: this.defaultCamera.aspect });\r\n            this.renderer.setSize(clientWidth, clientHeight);\r\n            this.axesCamera.aspect = this.axesDiv.clientWidth / this.axesDiv.clientHeight;\r\n            this.axesCamera.updateProjectionMatrix();\r\n            this.axesRenderer.setSize(this.axesDiv.clientWidth, this.axesDiv.clientHeight);\r\n        }\r\n\r\n        load(url, rootPath, assetMap) {\r\n            const baseURL = THREE.LoaderUtils.extractUrlBase(url);\r\n            return new Promise((resolve, reject) => {\r\n                const manager = new THREE.LoadingManager();\r\n                manager.setURLModifier((url, path) => {\r\n                    const normalizedURL = rootPath + decodeURI(url).replace(baseURL, '').replace(/^(\\.?\\/)/, '');\r\n                    if (assetMap.has(normalizedURL)) {\r\n                        const blob = assetMap.get(normalizedURL);\r\n                        const blobURL = URL.createObjectURL(blob);\r\n                        blobURLs.push(blobURL);\r\n                        return blobURL;\r\n                    }\r\n                    return (path || '') + url;\r\n                });\r\n                const loader = new GLTFLoader(manager);\r\n                loader.setCrossOrigin('anonymous');\r\n                const dracoLoader = new DRACOLoader();\r\n                dracoLoader.setDecoderPath('assets/draco/');\r\n                loader.setDRACOLoader(dracoLoader);\r\n                const blobURLs = [];\r\n                loader.load(url, gltf => {\r\n                    const scene = gltf.scene || gltf.scenes[0];\r\n                    const clips = gltf.animations || [];\r\n                    if (!scene) {\r\n                        throw new Error('This model contains no scene, and cannot be viewed here. However,' + ' it may contain individual 3D resources.');\r\n                    }\r\n                    this.setContent(scene, clips);\r\n                    blobURLs.forEach(URL.revokeObjectURL);\r\n                    resolve(gltf);\r\n                }, undefined, reject);\r\n            });\r\n        }\r\n\r\n        setContent(object, clips) {\r\n            this.clear();\r\n            const box = new THREE.Box3().setFromObject(object);\r\n            const size = box.getSize(new THREE.Vector3()).length();\r\n            const center = box.getCenter(new THREE.Vector3());\r\n            this.controls.reset();\r\n            object.position.x += object.position.x - center.x;\r\n            object.position.y += object.position.y - center.y;\r\n            object.position.z += object.position.z - center.z;\r\n            this.controls.maxDistance = size * 10;\r\n            this.defaultCamera.near = size / 100;\r\n            this.defaultCamera.far = size * 100;\r\n            this.defaultCamera.updateProjectionMatrix();\r\n            if (this.options.cameraPosition) {\r\n                this.defaultCamera.position.fromArray(this.options.cameraPosition);\r\n                this.defaultCamera.lookAt(new THREE.Vector3());\r\n            } else {\r\n                this.defaultCamera.position.copy(center);\r\n                this.defaultCamera.position.x += size / 2;\r\n                this.defaultCamera.position.y += size / 5;\r\n                this.defaultCamera.position.z += size / 2;\r\n                this.defaultCamera.lookAt(center);\r\n            }\r\n            this.setCamera(DEFAULT_CAMERA);\r\n            this.axesCamera.position.copy(this.defaultCamera.position);\r\n            this.axesCamera.lookAt(this.axesScene.position);\r\n            this.axesCamera.near = size / 100;\r\n            this.axesCamera.far = size * 100;\r\n            this.axesCamera.updateProjectionMatrix();\r\n            this.axesCorner.scale.set(size, size, size);\r\n            this.controls.saveState();\r\n            this.scene.add(object);\r\n            this.content = object;\r\n            this.state.addLights = true;\r\n            this.content.traverse(node => {\r\n                if (node.isLight) {\r\n                    this.state.addLights = false;\r\n                } else if (node.isMesh) {\r\n                    node.material.depthWrite = !node.material.transparent;\r\n                }\r\n            });\r\n            this.setClips(clips);\r\n            this.updateLights();\r\n            this.updateGUI();\r\n            this.updateEnvironment();\r\n            this.updateTextureEncoding();\r\n            this.updateDisplay();\r\n            window.content = this.content;\r\n            console.info('[glTF Viewer] THREE.Scene exported as `window.content`.');\r\n            this.printGraph(this.content);\r\n        }\r\n\r\n        printGraph(node) {\r\n            console.group(' <' + node.type + '> ' + node.name);\r\n            node.children.forEach(child => this.printGraph(child));\r\n            console.groupEnd();\r\n        }\r\n\r\n        setClips(clips) {\r\n            if (this.mixer) {\r\n                this.mixer.stopAllAction();\r\n                this.mixer.uncacheRoot(this.mixer.getRoot());\r\n                this.mixer = null;\r\n            }\r\n            this.clips = clips;\r\n            if (!clips.length)\r\n                return;\r\n            this.mixer = new THREE.AnimationMixer(this.content);\r\n        }\r\n\r\n        playAllClips() {\r\n            this.clips.forEach(clip => {\r\n                this.mixer.clipAction(clip).reset().play();\r\n                this.state.actionStates[clip.name] = true;\r\n            });\r\n        }\r\n\r\n        setCamera(name) {\r\n            if (name === DEFAULT_CAMERA) {\r\n                this.controls.enabled = true;\r\n                this.activeCamera = this.defaultCamera;\r\n            } else {\r\n                this.controls.enabled = false;\r\n                this.content.traverse(node => {\r\n                    if (node.isCamera && node.name === name) {\r\n                        this.activeCamera = node;\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        updateTextureEncoding() {\r\n            const encoding = this.state.textureEncoding === 'sRGB' ? THREE.sRGBEncoding : THREE.LinearEncoding;\r\n            traverseMaterials(this.content, material => {\r\n                if (material.map)\r\n                    material.map.encoding = encoding;\r\n                if (material.emissiveMap)\r\n                    material.emissiveMap.encoding = encoding;\r\n                if (material.map || material.emissiveMap)\r\n                    material.needsUpdate = true;\r\n            });\r\n        }\r\n\r\n        updateLights() {\r\n            const state = this.state;\r\n            const lights = this.lights;\r\n            if (state.addLights && !lights.length) {\r\n                this.addLights();\r\n            } else if (!state.addLights && lights.length) {\r\n                this.removeLights();\r\n            }\r\n            this.renderer.toneMappingExposure = state.exposure;\r\n            if (lights.length === 2) {\r\n                lights[0].intensity = state.ambientIntensity;\r\n                lights[0].color.setHex(state.ambientColor);\r\n                lights[1].intensity = state.directIntensity;\r\n                lights[1].color.setHex(state.directColor);\r\n            }\r\n        }\r\n\r\n        addLights() {\r\n            const state = this.state;\r\n            if (this.options.preset === Preset.ASSET_GENERATOR) {\r\n                const hemiLight = new THREE.HemisphereLight();\r\n                hemiLight.name = 'hemi_light';\r\n                this.scene.add(hemiLight);\r\n                this.lights.push(hemiLight);\r\n                return;\r\n            }\r\n            const light1 = new THREE.AmbientLight(state.ambientColor, state.ambientIntensity);\r\n            light1.name = 'ambient_light';\r\n            this.defaultCamera.add(light1);\r\n            const light2 = new THREE.DirectionalLight(state.directColor, state.directIntensity);\r\n            light2.position.set(0.5, 0, 0.866);\r\n            light2.name = 'main_light';\r\n            this.defaultCamera.add(light2);\r\n            this.lights.push(light1, light2);\r\n        }\r\n\r\n        removeLights() {\r\n            this.lights.forEach(light => light.parent.remove(light));\r\n            this.lights.length = 0;\r\n        }\r\n\r\n        updateEnvironment() {\r\n            const environment = environments.filter(entry => entry.name === this.state.environment)[0];\r\n            this.getCubeMapTexture(environment).then(({envMap}) => {\r\n                if ((!envMap || !this.state.background) && this.activeCamera === this.defaultCamera) {\r\n                    this.scene.add(this.vignette);\r\n                } else {\r\n                    this.scene.remove(this.vignette);\r\n                }\r\n                this.scene.environment = envMap;\r\n                this.scene.background = this.state.background ? envMap : null;\r\n            });\r\n        }\r\n\r\n        getCubeMapTexture(environment) {\r\n            const {path} = environment;\r\n            if (!path)\r\n                return Promise.resolve({ envMap: null });\r\n            return new Promise((resolve, reject) => {\r\n                new RGBELoader().setDataType(THREE.UnsignedByteType).load(path, texture => {\r\n                    const envMap = this.pmremGenerator.fromEquirectangular(texture).texture;\r\n                    this.pmremGenerator.dispose();\r\n                    resolve({ envMap });\r\n                }, undefined, reject);\r\n            });\r\n        }\r\n\r\n        updateDisplay() {\r\n            if (this.skeletonHelpers.length) {\r\n                this.skeletonHelpers.forEach(helper => this.scene.remove(helper));\r\n            }\r\n            traverseMaterials(this.content, material => {\r\n                material.wireframe = this.state.wireframe;\r\n            });\r\n            this.content.traverse(node => {\r\n                if (node.isMesh && node.skeleton && this.state.skeleton) {\r\n                    const helper = new THREE.SkeletonHelper(node.skeleton.bones[0].parent);\r\n                    helper.material.linewidth = 3;\r\n                    this.scene.add(helper);\r\n                    this.skeletonHelpers.push(helper);\r\n                }\r\n            });\r\n            if (this.state.grid !== Boolean(this.gridHelper)) {\r\n                if (this.state.grid) {\r\n                    this.gridHelper = new THREE.GridHelper();\r\n                    this.axesHelper = new THREE.AxesHelper();\r\n                    this.axesHelper.renderOrder = 999;\r\n                    this.axesHelper.onBeforeRender = renderer => renderer.clearDepth();\r\n                    this.scene.add(this.gridHelper);\r\n                    this.scene.add(this.axesHelper);\r\n                } else {\r\n                    this.scene.remove(this.gridHelper);\r\n                    this.scene.remove(this.axesHelper);\r\n                    this.gridHelper = null;\r\n                    this.axesHelper = null;\r\n                    this.axesRenderer.clear();\r\n                }\r\n            }\r\n        }\r\n\r\n        updateBackground() {\r\n            this.vignette.style({\r\n                colors: [\r\n                    this.state.bgColor1,\r\n                    this.state.bgColor2\r\n                ]\r\n            });\r\n        }\r\n\r\n        addAxesHelper() {\r\n            this.axesDiv = document.createElement('div');\r\n            this.el.appendChild(this.axesDiv);\r\n            this.axesDiv.classList.add('axes');\r\n            const {clientWidth, clientHeight} = this.axesDiv;\r\n            this.axesScene = new THREE.Scene();\r\n            this.axesCamera = new THREE.PerspectiveCamera(50, clientWidth / clientHeight, 0.1, 10);\r\n            this.axesScene.add(this.axesCamera);\r\n            this.axesRenderer = new THREE.WebGLRenderer({ alpha: true });\r\n            this.axesRenderer.setPixelRatio(window.devicePixelRatio);\r\n            this.axesRenderer.setSize(this.axesDiv.clientWidth, this.axesDiv.clientHeight);\r\n            this.axesCamera.up = this.defaultCamera.up;\r\n            this.axesCorner = new THREE.AxesHelper(5);\r\n            this.axesScene.add(this.axesCorner);\r\n            this.axesDiv.appendChild(this.axesRenderer.domElement);\r\n        }\r\n\r\n        addGUI() {\r\n            const gui = this.gui = new datgui.GUI({\r\n                autoPlace: false,\r\n                width: 260,\r\n                hideable: true\r\n            });\r\n            const dispFolder = gui.addFolder('Display');\r\n            const envBackgroundCtrl = dispFolder.add(this.state, 'background');\r\n            envBackgroundCtrl.onChange(() => this.updateEnvironment());\r\n            const wireframeCtrl = dispFolder.add(this.state, 'wireframe');\r\n            wireframeCtrl.onChange(() => this.updateDisplay());\r\n            const skeletonCtrl = dispFolder.add(this.state, 'skeleton');\r\n            skeletonCtrl.onChange(() => this.updateDisplay());\r\n            const gridCtrl = dispFolder.add(this.state, 'grid');\r\n            gridCtrl.onChange(() => this.updateDisplay());\r\n            dispFolder.add(this.controls, 'autoRotate');\r\n            dispFolder.add(this.controls, 'screenSpacePanning');\r\n            const bgColor1Ctrl = dispFolder.addColor(this.state, 'bgColor1');\r\n            const bgColor2Ctrl = dispFolder.addColor(this.state, 'bgColor2');\r\n            bgColor1Ctrl.onChange(() => this.updateBackground());\r\n            bgColor2Ctrl.onChange(() => this.updateBackground());\r\n            const lightFolder = gui.addFolder('Lighting');\r\n            const encodingCtrl = lightFolder.add(this.state, 'textureEncoding', [\r\n                'sRGB',\r\n                'Linear'\r\n            ]);\r\n            encodingCtrl.onChange(() => this.updateTextureEncoding());\r\n            lightFolder.add(this.renderer, 'outputEncoding', {\r\n                sRGB: THREE.sRGBEncoding,\r\n                Linear: THREE.LinearEncoding\r\n            }).onChange(() => {\r\n                this.renderer.outputEncoding = Number(this.renderer.outputEncoding);\r\n                traverseMaterials(this.content, material => {\r\n                    material.needsUpdate = true;\r\n                });\r\n            });\r\n            const envMapCtrl = lightFolder.add(this.state, 'environment', environments.map(env => env.name));\r\n            envMapCtrl.onChange(() => this.updateEnvironment());\r\n            [\r\n                lightFolder.add(this.state, 'exposure', 0, 2),\r\n                lightFolder.add(this.state, 'addLights').listen(),\r\n                lightFolder.add(this.state, 'ambientIntensity', 0, 2),\r\n                lightFolder.addColor(this.state, 'ambientColor'),\r\n                lightFolder.add(this.state, 'directIntensity', 0, 4),\r\n                lightFolder.addColor(this.state, 'directColor')\r\n            ].forEach(ctrl => ctrl.onChange(() => this.updateLights()));\r\n            this.animFolder = gui.addFolder('Animation');\r\n            this.animFolder.domElement.style.display = 'none';\r\n            const playbackSpeedCtrl = this.animFolder.add(this.state, 'playbackSpeed', 0, 1);\r\n            playbackSpeedCtrl.onChange(speed => {\r\n                if (this.mixer)\r\n                    this.mixer.timeScale = speed;\r\n            });\r\n            this.animFolder.add({ playAll: () => this.playAllClips() }, 'playAll');\r\n            this.morphFolder = gui.addFolder('Morph Targets');\r\n            this.morphFolder.domElement.style.display = 'none';\r\n            this.cameraFolder = gui.addFolder('Cameras');\r\n            this.cameraFolder.domElement.style.display = 'none';\r\n            const perfFolder = gui.addFolder('Performance');\r\n            const perfLi = document.createElement('li');\r\n            this.stats.dom.style.position = 'static';\r\n            perfLi.appendChild(this.stats.dom);\r\n            perfLi.classList.add('gui-stats');\r\n            perfFolder.__ul.appendChild(perfLi);\r\n            const guiWrap = document.createElement('div');\r\n            this.el.appendChild(guiWrap);\r\n            guiWrap.classList.add('gui-wrap');\r\n            guiWrap.appendChild(gui.domElement);\r\n            gui.open();\r\n        }\r\n\r\n        updateGUI() {\r\n            this.cameraFolder.domElement.style.display = 'none';\r\n            this.morphCtrls.forEach(ctrl => ctrl.remove());\r\n            this.morphCtrls.length = 0;\r\n            this.morphFolder.domElement.style.display = 'none';\r\n            this.animCtrls.forEach(ctrl => ctrl.remove());\r\n            this.animCtrls.length = 0;\r\n            this.animFolder.domElement.style.display = 'none';\r\n            const cameraNames = [];\r\n            const morphMeshes = [];\r\n            this.content.traverse(node => {\r\n                if (node.isMesh && node.morphTargetInfluences) {\r\n                    morphMeshes.push(node);\r\n                }\r\n                if (node.isCamera) {\r\n                    node.name = node.name || `VIEWER__camera_${ cameraNames.length + 1 }`;\r\n                    cameraNames.push(node.name);\r\n                }\r\n            });\r\n            if (cameraNames.length) {\r\n                this.cameraFolder.domElement.style.display = '';\r\n                if (this.cameraCtrl)\r\n                    this.cameraCtrl.remove();\r\n                const cameraOptions = [DEFAULT_CAMERA].concat(cameraNames);\r\n                this.cameraCtrl = this.cameraFolder.add(this.state, 'camera', cameraOptions);\r\n                this.cameraCtrl.onChange(name => this.setCamera(name));\r\n            }\r\n            if (morphMeshes.length) {\r\n                this.morphFolder.domElement.style.display = '';\r\n                morphMeshes.forEach(mesh => {\r\n                    if (mesh.morphTargetInfluences.length) {\r\n                        const nameCtrl = this.morphFolder.add({ name: mesh.name || 'Untitled' }, 'name');\r\n                        this.morphCtrls.push(nameCtrl);\r\n                    }\r\n                    for (let i = 0; i < mesh.morphTargetInfluences.length; i++) {\r\n                        const ctrl = this.morphFolder.add(mesh.morphTargetInfluences, i, 0, 1, 0.01).listen();\r\n                        Object.keys(mesh.morphTargetDictionary).forEach(key => {\r\n                            if (key && mesh.morphTargetDictionary[key] === i)\r\n                                ctrl.name(key);\r\n                        });\r\n                        this.morphCtrls.push(ctrl);\r\n                    }\r\n                });\r\n            }\r\n            if (this.clips.length) {\r\n                this.animFolder.domElement.style.display = '';\r\n                const actionStates = this.state.actionStates = {};\r\n                this.clips.forEach((clip, clipIndex) => {\r\n                    let action;\r\n                    if (clipIndex === 0) {\r\n                        actionStates[clip.name] = true;\r\n                        action = this.mixer.clipAction(clip);\r\n                        action.play();\r\n                    } else {\r\n                        actionStates[clip.name] = false;\r\n                    }\r\n                    const ctrl = this.animFolder.add(actionStates, clip.name).listen();\r\n                    ctrl.onChange(playAnimation => {\r\n                        action = action || this.mixer.clipAction(clip);\r\n                        action.setEffectiveTimeScale(1);\r\n                        playAnimation ? action.play() : action.stop();\r\n                    });\r\n                    this.animCtrls.push(ctrl);\r\n                });\r\n            }\r\n        }\r\n        clear() {\r\n            if (!this.content)\r\n                return;\r\n            this.scene.remove(this.content);\r\n            this.content.traverse(node => {\r\n                if (!node.isMesh)\r\n                    return;\r\n                node.geometry.dispose();\r\n            });\r\n            traverseMaterials(this.content, material => {\r\n                MAP_NAMES.forEach(map => {\r\n                    if (material[map])\r\n                        material[map].dispose();\r\n                });\r\n            });\r\n        }\r\n    } ;\r\n\r\n    function traverseMaterials(object, callback) {\r\n        object.traverse(node => {\r\n            if (!node.isMesh)\r\n                return;\r\n            const materials = Array.isArray(node.material) ? node.material : [node.material];\r\n            materials.forEach(callback);\r\n        });\r\n    }\r\n\r\n    return threegltviewer.Viewer = Viewer;\r\n});"]}