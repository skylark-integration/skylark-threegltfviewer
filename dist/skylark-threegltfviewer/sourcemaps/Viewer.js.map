{"version":3,"sources":["Viewer.js"],"names":["define","THREE","Stats","GLTFLoader","DRACOLoader","OrbitControls","RGBELoader","datgui","threegltviewer","environments","vignettes","DEFAULT_CAMERA","IS_IOS","test","navigator","userAgent","window","MSStream","MAP_NAMES","Preset","ASSET_GENERATOR","Cache","enabled","traverseMaterials","object","callback","traverse","node","isMesh","Array","isArray","material","forEach","[object Object]","el","options","this","lights","content","mixer","clips","gui","state","environment","preset","find","e","id","name","background","playbackSpeed","actionStates","camera","wireframe","skeleton","grid","addLights","exposure","textureEncoding","ambientIntensity","ambientColor","directIntensity","Math","PI","directColor","bgColor1","bgColor2","prevTime","stats","dom","height","call","children","child","style","display","scene","Scene","fov","defaultCamera","PerspectiveCamera","clientWidth","clientHeight","activeCamera","add","renderer","WebGLRenderer","antialias","physicallyCorrectLights","outputEncoding","sRGBEncoding","setClearColor","setPixelRatio","devicePixelRatio","setSize","pmremGenerator","PMREMGenerator","compileEquirectangularShader","controls","domElement","autoRotate","autoRotateSpeed","screenSpacePanning","vignette","createBackground","aspect","grainScale","colors","renderOrder","appendChild","cameraCtrl","cameraFolder","animFolder","animCtrls","morphFolder","morphCtrls","skeletonHelpers","gridHelper","axesHelper","addAxesHelper","addGUI","kiosk","close","animate","bind","requestAnimationFrame","addEventListener","resize","time","dt","update","render","axesCamera","position","copy","lookAt","axesScene","axesRenderer","parentElement","updateProjectionMatrix","axesDiv","url","rootPath","assetMap","baseURL","LoaderUtils","extractUrlBase","Promise","resolve","reject","manager","LoadingManager","setURLModifier","path","normalizedURL","decodeURI","replace","has","blob","get","blobURL","URL","createObjectURL","blobURLs","push","loader","b","setCrossOrigin","dracoLoader","c","setDecoderPath","setDRACOLoader","load","gltf","scenes","animations","Error","setContent","revokeObjectURL","undefined","clear","box","Box3","setFromObject","size","getSize","Vector3","length","center","getCenter","reset","x","y","z","maxDistance","near","far","cameraPosition","fromArray","setCamera","axesCorner","scale","set","saveState","isLight","depthWrite","transparent","setClips","updateLights","updateGUI","updateEnvironment","updateTextureEncoding","updateDisplay","console","info","printGraph","group","type","groupEnd","stopAllAction","uncacheRoot","getRoot","AnimationMixer","clip","clipAction","play","isCamera","encoding","LinearEncoding","map","emissiveMap","needsUpdate","removeLights","toneMappingExposure","intensity","color","setHex","hemiLight","HemisphereLight","light1","AmbientLight","light2","DirectionalLight","light","parent","remove","g","filter","entry","getCubeMapTexture","then","envMap","setDataType","UnsignedByteType","texture","fromEquirectangular","dispose","helper","SkeletonHelper","bones","linewidth","Boolean","GridHelper","AxesHelper","onBeforeRender","clearDepth","document","createElement","classList","alpha","up","autoPlace","width","hideable","dispFolder","addFolder","onChange","bgColor1Ctrl","addColor","bgColor2Ctrl","updateBackground","lightFolder","sRGB","Linear","Number","env","listen","ctrl","speed","timeScale","playAll","playAllClips","perfFolder","perfLi","__ul","guiWrap","open","cameraNames","morphMeshes","morphTargetInfluences","cameraOptions","concat","mesh","nameCtrl","i","Object","keys","morphTargetDictionary","key","clipIndex","action","playAnimation","setEffectiveTimeScale","stop","geometry"],"mappings":"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","file":"../Viewer.js","sourcesContent":["define([\n    'skylark-threejs',\n    'skylark-threejs-ex/utils/stats',\n    'skylark-threejs-ex/loaders/GLTFLoader',\n    'skylark-threejs-ex/loaders/DRACOLoader',\n    'skylark-threejs-ex/controls/OrbitControls',\n    'skylark-threejs-ex/loaders/RGBELoader',\n    'skylark-datgui',\n    \"./threegltviewer\",\n    './environments',\n    './vignettes'\n], function (\n  THREE, \n  Stats, \n  GLTFLoader,\n  DRACOLoader, \n  OrbitControls, \n  RGBELoader, \n  datgui, \n  threegltviewer,\n  environments, \n  vignettes\n) {\n    'use strict';\n    const DEFAULT_CAMERA = '[default]';\n    const IS_IOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\n    const MAP_NAMES = [\n        'map',\n        'aoMap',\n        'emissiveMap',\n        'glossinessMap',\n        'metalnessMap',\n        'normalMap',\n        'roughnessMap',\n        'specularMap'\n    ];\n    const Preset = { ASSET_GENERATOR: 'assetgenerator' };\n    THREE.Cache.enabled = true;\n    class Viewer {\n        constructor(el, options) {\n            this.el = el;\n            this.options = options;\n            this.lights = [];\n            this.content = null;\n            this.mixer = null;\n            this.clips = [];\n            this.gui = null;\n            this.state = {\n                environment: options.preset === Preset.ASSET_GENERATOR ? environments.find(e => e.id === 'footprint-court').name : environments[1].name,\n                background: false,\n                playbackSpeed: 1,\n                actionStates: {},\n                camera: DEFAULT_CAMERA,\n                wireframe: false,\n                skeleton: false,\n                grid: false,\n                addLights: true,\n                exposure: 1,\n                textureEncoding: 'sRGB',\n                ambientIntensity: 0.3,\n                ambientColor: 16777215,\n                directIntensity: 0.8 * Math.PI,\n                directColor: 16777215,\n                bgColor1: '#ffffff',\n                bgColor2: '#353535'\n            };\n            this.prevTime = 0;\n            this.stats = new Stats();\n            this.stats.dom.height = '48px';\n            [].forEach.call(this.stats.dom.children, child => child.style.display = '');\n            this.scene = new THREE.Scene();\n            const fov = options.preset === Preset.ASSET_GENERATOR ? 0.8 * 180 / Math.PI : 60;\n            this.defaultCamera = new THREE.PerspectiveCamera(fov, el.clientWidth / el.clientHeight, 0.01, 1000);\n            this.activeCamera = this.defaultCamera;\n            this.scene.add(this.defaultCamera);\n            this.renderer = window.renderer = new THREE.WebGLRenderer({ antialias: true });\n            this.renderer.physicallyCorrectLights = true;\n            this.renderer.outputEncoding = THREE.sRGBEncoding;\n            this.renderer.setClearColor(13421772);\n            this.renderer.setPixelRatio(window.devicePixelRatio);\n            this.renderer.setSize(el.clientWidth, el.clientHeight);\n            this.pmremGenerator = new THREE.PMREMGenerator(this.renderer);\n            this.pmremGenerator.compileEquirectangularShader();\n            this.controls = new OrbitControls(this.defaultCamera, this.renderer.domElement);\n            this.controls.autoRotate = false;\n            this.controls.autoRotateSpeed = -10;\n            this.controls.screenSpacePanning = true;\n            this.vignette = vignettes.createBackground({\n                aspect: this.defaultCamera.aspect,\n                grainScale: IS_IOS ? 0 : 0.001,\n                colors: [\n                    this.state.bgColor1,\n                    this.state.bgColor2\n                ]\n            });\n            this.vignette.name = 'Vignette';\n            this.vignette.renderOrder = -1;\n            this.el.appendChild(this.renderer.domElement);\n            this.cameraCtrl = null;\n            this.cameraFolder = null;\n            this.animFolder = null;\n            this.animCtrls = [];\n            this.morphFolder = null;\n            this.morphCtrls = [];\n            this.skeletonHelpers = [];\n            this.gridHelper = null;\n            this.axesHelper = null;\n            this.addAxesHelper();\n            this.addGUI();\n            if (options.kiosk)\n                this.gui.close();\n            this.animate = this.animate.bind(this);\n            requestAnimationFrame(this.animate);\n            window.addEventListener('resize', this.resize.bind(this), false);\n        }\n\n        animate(time) {\n            requestAnimationFrame(this.animate);\n            const dt = (time - this.prevTime) / 1000;\n            this.controls.update();\n            this.stats.update();\n            this.mixer && this.mixer.update(dt);\n            this.render();\n            this.prevTime = time;\n        }\n\n        render() {\n            this.renderer.render(this.scene, this.activeCamera);\n            if (this.state.grid) {\n                this.axesCamera.position.copy(this.defaultCamera.position);\n                this.axesCamera.lookAt(this.axesScene.position);\n                this.axesRenderer.render(this.axesScene, this.axesCamera);\n            }\n        }\n\n        resize() {\n            const {clientHeight, clientWidth} = this.el.parentElement;\n            this.defaultCamera.aspect = clientWidth / clientHeight;\n            this.defaultCamera.updateProjectionMatrix();\n            this.vignette.style({ aspect: this.defaultCamera.aspect });\n            this.renderer.setSize(clientWidth, clientHeight);\n            this.axesCamera.aspect = this.axesDiv.clientWidth / this.axesDiv.clientHeight;\n            this.axesCamera.updateProjectionMatrix();\n            this.axesRenderer.setSize(this.axesDiv.clientWidth, this.axesDiv.clientHeight);\n        }\n\n        load(url, rootPath, assetMap) {\n            const baseURL = THREE.LoaderUtils.extractUrlBase(url);\n            return new Promise((resolve, reject) => {\n                const manager = new THREE.LoadingManager();\n                manager.setURLModifier((url, path) => {\n                    const normalizedURL = rootPath + decodeURI(url).replace(baseURL, '').replace(/^(\\.?\\/)/, '');\n                    if (assetMap.has(normalizedURL)) {\n                        const blob = assetMap.get(normalizedURL);\n                        const blobURL = URL.createObjectURL(blob);\n                        blobURLs.push(blobURL);\n                        return blobURL;\n                    }\n                    return (path || '') + url;\n                });\n                const loader = new b.GLTFLoader(manager);\n                loader.setCrossOrigin('anonymous');\n                const dracoLoader = new c.DRACOLoader();\n                dracoLoader.setDecoderPath('assets/draco/');\n                loader.setDRACOLoader(dracoLoader);\n                const blobURLs = [];\n                loader.load(url, gltf => {\n                    const scene = gltf.scene || gltf.scenes[0];\n                    const clips = gltf.animations || [];\n                    if (!scene) {\n                        throw new Error('This model contains no scene, and cannot be viewed here. However,' + ' it may contain individual 3D resources.');\n                    }\n                    this.setContent(scene, clips);\n                    blobURLs.forEach(URL.revokeObjectURL);\n                    resolve(gltf);\n                }, undefined, reject);\n            });\n        }\n\n        setContent(object, clips) {\n            this.clear();\n            const box = new THREE.Box3().setFromObject(object);\n            const size = box.getSize(new THREE.Vector3()).length();\n            const center = box.getCenter(new THREE.Vector3());\n            this.controls.reset();\n            object.position.x += object.position.x - center.x;\n            object.position.y += object.position.y - center.y;\n            object.position.z += object.position.z - center.z;\n            this.controls.maxDistance = size * 10;\n            this.defaultCamera.near = size / 100;\n            this.defaultCamera.far = size * 100;\n            this.defaultCamera.updateProjectionMatrix();\n            if (this.options.cameraPosition) {\n                this.defaultCamera.position.fromArray(this.options.cameraPosition);\n                this.defaultCamera.lookAt(new THREE.Vector3());\n            } else {\n                this.defaultCamera.position.copy(center);\n                this.defaultCamera.position.x += size / 2;\n                this.defaultCamera.position.y += size / 5;\n                this.defaultCamera.position.z += size / 2;\n                this.defaultCamera.lookAt(center);\n            }\n            this.setCamera(DEFAULT_CAMERA);\n            this.axesCamera.position.copy(this.defaultCamera.position);\n            this.axesCamera.lookAt(this.axesScene.position);\n            this.axesCamera.near = size / 100;\n            this.axesCamera.far = size * 100;\n            this.axesCamera.updateProjectionMatrix();\n            this.axesCorner.scale.set(size, size, size);\n            this.controls.saveState();\n            this.scene.add(object);\n            this.content = object;\n            this.state.addLights = true;\n            this.content.traverse(node => {\n                if (node.isLight) {\n                    this.state.addLights = false;\n                } else if (node.isMesh) {\n                    node.material.depthWrite = !node.material.transparent;\n                }\n            });\n            this.setClips(clips);\n            this.updateLights();\n            this.updateGUI();\n            this.updateEnvironment();\n            this.updateTextureEncoding();\n            this.updateDisplay();\n            window.content = this.content;\n            console.info('[glTF Viewer] THREE.Scene exported as `window.content`.');\n            this.printGraph(this.content);\n        }\n\n        printGraph(node) {\n            console.group(' <' + node.type + '> ' + node.name);\n            node.children.forEach(child => this.printGraph(child));\n            console.groupEnd();\n        }\n\n        setClips(clips) {\n            if (this.mixer) {\n                this.mixer.stopAllAction();\n                this.mixer.uncacheRoot(this.mixer.getRoot());\n                this.mixer = null;\n            }\n            this.clips = clips;\n            if (!clips.length)\n                return;\n            this.mixer = new THREE.AnimationMixer(this.content);\n        }\n\n        playAllClips() {\n            this.clips.forEach(clip => {\n                this.mixer.clipAction(clip).reset().play();\n                this.state.actionStates[clip.name] = true;\n            });\n        }\n\n        setCamera(name) {\n            if (name === DEFAULT_CAMERA) {\n                this.controls.enabled = true;\n                this.activeCamera = this.defaultCamera;\n            } else {\n                this.controls.enabled = false;\n                this.content.traverse(node => {\n                    if (node.isCamera && node.name === name) {\n                        this.activeCamera = node;\n                    }\n                });\n            }\n        }\n\n        updateTextureEncoding() {\n            const encoding = this.state.textureEncoding === 'sRGB' ? THREE.sRGBEncoding : THREE.LinearEncoding;\n            traverseMaterials(this.content, material => {\n                if (material.map)\n                    material.map.encoding = encoding;\n                if (material.emissiveMap)\n                    material.emissiveMap.encoding = encoding;\n                if (material.map || material.emissiveMap)\n                    material.needsUpdate = true;\n            });\n        }\n\n        updateLights() {\n            const state = this.state;\n            const lights = this.lights;\n            if (state.addLights && !lights.length) {\n                this.addLights();\n            } else if (!state.addLights && lights.length) {\n                this.removeLights();\n            }\n            this.renderer.toneMappingExposure = state.exposure;\n            if (lights.length === 2) {\n                lights[0].intensity = state.ambientIntensity;\n                lights[0].color.setHex(state.ambientColor);\n                lights[1].intensity = state.directIntensity;\n                lights[1].color.setHex(state.directColor);\n            }\n        }\n\n        addLights() {\n            const state = this.state;\n            if (this.options.preset === Preset.ASSET_GENERATOR) {\n                const hemiLight = new THREE.HemisphereLight();\n                hemiLight.name = 'hemi_light';\n                this.scene.add(hemiLight);\n                this.lights.push(hemiLight);\n                return;\n            }\n            const light1 = new THREE.AmbientLight(state.ambientColor, state.ambientIntensity);\n            light1.name = 'ambient_light';\n            this.defaultCamera.add(light1);\n            const light2 = new THREE.DirectionalLight(state.directColor, state.directIntensity);\n            light2.position.set(0.5, 0, 0.866);\n            light2.name = 'main_light';\n            this.defaultCamera.add(light2);\n            this.lights.push(light1, light2);\n        }\n\n        removeLights() {\n            this.lights.forEach(light => light.parent.remove(light));\n            this.lights.length = 0;\n        }\n\n        updateEnvironment() {\n            const environment = g.environments.filter(entry => entry.name === this.state.environment)[0];\n            this.getCubeMapTexture(environment).then(({envMap}) => {\n                if ((!envMap || !this.state.background) && this.activeCamera === this.defaultCamera) {\n                    this.scene.add(this.vignette);\n                } else {\n                    this.scene.remove(this.vignette);\n                }\n                this.scene.environment = envMap;\n                this.scene.background = this.state.background ? envMap : null;\n            });\n        }\n\n        getCubeMapTexture(environment) {\n            const {path} = environment;\n            if (!path)\n                return Promise.resolve({ envMap: null });\n            return new Promise((resolve, reject) => {\n                new e.RGBELoader().setDataType(THREE.UnsignedByteType).load(path, texture => {\n                    const envMap = this.pmremGenerator.fromEquirectangular(texture).texture;\n                    this.pmremGenerator.dispose();\n                    resolve({ envMap });\n                }, undefined, reject);\n            });\n        }\n\n        updateDisplay() {\n            if (this.skeletonHelpers.length) {\n                this.skeletonHelpers.forEach(helper => this.scene.remove(helper));\n            }\n            traverseMaterials(this.content, material => {\n                material.wireframe = this.state.wireframe;\n            });\n            this.content.traverse(node => {\n                if (node.isMesh && node.skeleton && this.state.skeleton) {\n                    const helper = new THREE.SkeletonHelper(node.skeleton.bones[0].parent);\n                    helper.material.linewidth = 3;\n                    this.scene.add(helper);\n                    this.skeletonHelpers.push(helper);\n                }\n            });\n            if (this.state.grid !== Boolean(this.gridHelper)) {\n                if (this.state.grid) {\n                    this.gridHelper = new THREE.GridHelper();\n                    this.axesHelper = new THREE.AxesHelper();\n                    this.axesHelper.renderOrder = 999;\n                    this.axesHelper.onBeforeRender = renderer => renderer.clearDepth();\n                    this.scene.add(this.gridHelper);\n                    this.scene.add(this.axesHelper);\n                } else {\n                    this.scene.remove(this.gridHelper);\n                    this.scene.remove(this.axesHelper);\n                    this.gridHelper = null;\n                    this.axesHelper = null;\n                    this.axesRenderer.clear();\n                }\n            }\n        }\n\n        updateBackground() {\n            this.vignette.style({\n                colors: [\n                    this.state.bgColor1,\n                    this.state.bgColor2\n                ]\n            });\n        }\n\n        addAxesHelper() {\n            this.axesDiv = document.createElement('div');\n            this.el.appendChild(this.axesDiv);\n            this.axesDiv.classList.add('axes');\n            const {clientWidth, clientHeight} = this.axesDiv;\n            this.axesScene = new THREE.Scene();\n            this.axesCamera = new THREE.PerspectiveCamera(50, clientWidth / clientHeight, 0.1, 10);\n            this.axesScene.add(this.axesCamera);\n            this.axesRenderer = new THREE.WebGLRenderer({ alpha: true });\n            this.axesRenderer.setPixelRatio(window.devicePixelRatio);\n            this.axesRenderer.setSize(this.axesDiv.clientWidth, this.axesDiv.clientHeight);\n            this.axesCamera.up = this.defaultCamera.up;\n            this.axesCorner = new THREE.AxesHelper(5);\n            this.axesScene.add(this.axesCorner);\n            this.axesDiv.appendChild(this.axesRenderer.domElement);\n        }\n\n        addGUI() {\n            const gui = this.gui = new datgui({\n                autoPlace: false,\n                width: 260,\n                hideable: true\n            });\n            const dispFolder = gui.addFolder('Display');\n            const envBackgroundCtrl = dispFolder.add(this.state, 'background');\n            envBackgroundCtrl.onChange(() => this.updateEnvironment());\n            const wireframeCtrl = dispFolder.add(this.state, 'wireframe');\n            wireframeCtrl.onChange(() => this.updateDisplay());\n            const skeletonCtrl = dispFolder.add(this.state, 'skeleton');\n            skeletonCtrl.onChange(() => this.updateDisplay());\n            const gridCtrl = dispFolder.add(this.state, 'grid');\n            gridCtrl.onChange(() => this.updateDisplay());\n            dispFolder.add(this.controls, 'autoRotate');\n            dispFolder.add(this.controls, 'screenSpacePanning');\n            const bgColor1Ctrl = dispFolder.addColor(this.state, 'bgColor1');\n            const bgColor2Ctrl = dispFolder.addColor(this.state, 'bgColor2');\n            bgColor1Ctrl.onChange(() => this.updateBackground());\n            bgColor2Ctrl.onChange(() => this.updateBackground());\n            const lightFolder = gui.addFolder('Lighting');\n            const encodingCtrl = lightFolder.add(this.state, 'textureEncoding', [\n                'sRGB',\n                'Linear'\n            ]);\n            encodingCtrl.onChange(() => this.updateTextureEncoding());\n            lightFolder.add(this.renderer, 'outputEncoding', {\n                sRGB: THREE.sRGBEncoding,\n                Linear: THREE.LinearEncoding\n            }).onChange(() => {\n                this.renderer.outputEncoding = Number(this.renderer.outputEncoding);\n                traverseMaterials(this.content, material => {\n                    material.needsUpdate = true;\n                });\n            });\n            const envMapCtrl = lightFolder.add(this.state, 'environment', g.environments.map(env => env.name));\n            envMapCtrl.onChange(() => this.updateEnvironment());\n            [\n                lightFolder.add(this.state, 'exposure', 0, 2),\n                lightFolder.add(this.state, 'addLights').listen(),\n                lightFolder.add(this.state, 'ambientIntensity', 0, 2),\n                lightFolder.addColor(this.state, 'ambientColor'),\n                lightFolder.add(this.state, 'directIntensity', 0, 4),\n                lightFolder.addColor(this.state, 'directColor')\n            ].forEach(ctrl => ctrl.onChange(() => this.updateLights()));\n            this.animFolder = gui.addFolder('Animation');\n            this.animFolder.domElement.style.display = 'none';\n            const playbackSpeedCtrl = this.animFolder.add(this.state, 'playbackSpeed', 0, 1);\n            playbackSpeedCtrl.onChange(speed => {\n                if (this.mixer)\n                    this.mixer.timeScale = speed;\n            });\n            this.animFolder.add({ playAll: () => this.playAllClips() }, 'playAll');\n            this.morphFolder = gui.addFolder('Morph Targets');\n            this.morphFolder.domElement.style.display = 'none';\n            this.cameraFolder = gui.addFolder('Cameras');\n            this.cameraFolder.domElement.style.display = 'none';\n            const perfFolder = gui.addFolder('Performance');\n            const perfLi = document.createElement('li');\n            this.stats.dom.style.position = 'static';\n            perfLi.appendChild(this.stats.dom);\n            perfLi.classList.add('gui-stats');\n            perfFolder.__ul.appendChild(perfLi);\n            const guiWrap = document.createElement('div');\n            this.el.appendChild(guiWrap);\n            guiWrap.classList.add('gui-wrap');\n            guiWrap.appendChild(gui.domElement);\n            gui.open();\n        }\n\n        updateGUI() {\n            this.cameraFolder.domElement.style.display = 'none';\n            this.morphCtrls.forEach(ctrl => ctrl.remove());\n            this.morphCtrls.length = 0;\n            this.morphFolder.domElement.style.display = 'none';\n            this.animCtrls.forEach(ctrl => ctrl.remove());\n            this.animCtrls.length = 0;\n            this.animFolder.domElement.style.display = 'none';\n            const cameraNames = [];\n            const morphMeshes = [];\n            this.content.traverse(node => {\n                if (node.isMesh && node.morphTargetInfluences) {\n                    morphMeshes.push(node);\n                }\n                if (node.isCamera) {\n                    node.name = node.name || `VIEWER__camera_${ cameraNames.length + 1 }`;\n                    cameraNames.push(node.name);\n                }\n            });\n            if (cameraNames.length) {\n                this.cameraFolder.domElement.style.display = '';\n                if (this.cameraCtrl)\n                    this.cameraCtrl.remove();\n                const cameraOptions = [DEFAULT_CAMERA].concat(cameraNames);\n                this.cameraCtrl = this.cameraFolder.add(this.state, 'camera', cameraOptions);\n                this.cameraCtrl.onChange(name => this.setCamera(name));\n            }\n            if (morphMeshes.length) {\n                this.morphFolder.domElement.style.display = '';\n                morphMeshes.forEach(mesh => {\n                    if (mesh.morphTargetInfluences.length) {\n                        const nameCtrl = this.morphFolder.add({ name: mesh.name || 'Untitled' }, 'name');\n                        this.morphCtrls.push(nameCtrl);\n                    }\n                    for (let i = 0; i < mesh.morphTargetInfluences.length; i++) {\n                        const ctrl = this.morphFolder.add(mesh.morphTargetInfluences, i, 0, 1, 0.01).listen();\n                        Object.keys(mesh.morphTargetDictionary).forEach(key => {\n                            if (key && mesh.morphTargetDictionary[key] === i)\n                                ctrl.name(key);\n                        });\n                        this.morphCtrls.push(ctrl);\n                    }\n                });\n            }\n            if (this.clips.length) {\n                this.animFolder.domElement.style.display = '';\n                const actionStates = this.state.actionStates = {};\n                this.clips.forEach((clip, clipIndex) => {\n                    let action;\n                    if (clipIndex === 0) {\n                        actionStates[clip.name] = true;\n                        action = this.mixer.clipAction(clip);\n                        action.play();\n                    } else {\n                        actionStates[clip.name] = false;\n                    }\n                    const ctrl = this.animFolder.add(actionStates, clip.name).listen();\n                    ctrl.onChange(playAnimation => {\n                        action = action || this.mixer.clipAction(clip);\n                        action.setEffectiveTimeScale(1);\n                        playAnimation ? action.play() : action.stop();\n                    });\n                    this.animCtrls.push(ctrl);\n                });\n            }\n        }\n        clear() {\n            if (!this.content)\n                return;\n            this.scene.remove(this.content);\n            this.content.traverse(node => {\n                if (!node.isMesh)\n                    return;\n                node.geometry.dispose();\n            });\n            traverseMaterials(this.content, material => {\n                MAP_NAMES.forEach(map => {\n                    if (material[map])\n                        material[map].dispose();\n                });\n            });\n        }\n    } ;\n\n    function traverseMaterials(object, callback) {\n        object.traverse(node => {\n            if (!node.isMesh)\n                return;\n            const materials = Array.isArray(node.material) ? node.material : [node.material];\n            materials.forEach(callback);\n        });\n    }\n\n    return Viewer;\n});"]}