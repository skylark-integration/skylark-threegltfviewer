{"version":3,"sources":["SimpleDropzone.js"],"names":["define","Emitter","jszip","threegltviewer","SimpleDropzone","[object Object]","el","inputEl","this","listeners","drop","dropstart","droperror","_onDragover","bind","_onDrop","_onSelect","addEventListener","type","callback","push","data","forEach","removeEventListener","e","entries","stopPropagation","preventDefault","_emit","dataTransfer","items","slice","call","map","item","webkitGetAsEntry","files","length","file","_isZip","_loadZip","Map","name","_fail","match","_loadNextEntry","dropEffect","fileMap","set","entry","pop","isFile","fullPath","console","error","isDirectory","reader","createReader","readerCallback","newEntries","concat","readEntries","warn","ZipLoader","unzip","then","archive","Object","keys","path","fileName","replace","File","buffer","message"],"mappings":"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","file":"../SimpleDropzone.js","sourcesContent":["define([\r\n\t\"skylark-langx-emitter\",\r\n\t\"skylark-jszip\",\r\n\t\"./threegltviewer\"\r\n],function(Emitter,jszip,threegltviewer) {\r\n\t//import ZipLoader from 'zip-loader';\r\n\r\n\t/**\r\n\t * Watches an element for file drops, parses to create a filemap hierarchy,\r\n\t * and emits the result.\r\n\t */\r\n\tclass SimpleDropzone {\r\n\r\n\t  /**\r\n\t   * @param  {Element} el\r\n\t   * @param  {Element} inputEl\r\n\t   */\r\n\t  constructor (el, inputEl) {\r\n\t    this.el = el;\r\n\t    this.inputEl = inputEl;\r\n\r\n\t    this.listeners = {\r\n\t      drop: [],\r\n\t      dropstart: [],\r\n\t      droperror: []\r\n\t    };\r\n\r\n\t    this._onDragover = this._onDragover.bind(this);\r\n\t    this._onDrop = this._onDrop.bind(this);\r\n\t    this._onSelect = this._onSelect.bind(this);\r\n\r\n\t    el.addEventListener('dragover', this._onDragover, false);\r\n\t    el.addEventListener('drop', this._onDrop, false);\r\n\t    inputEl.addEventListener('change', this._onSelect);\r\n\t  }\r\n\r\n\t  /**\r\n\t   * @param  {string}   type\r\n\t   * @param  {Function} callback\r\n\t   * @return {SimpleDropzone}\r\n\t   */\r\n\t  on (type, callback) {\r\n\t    this.listeners[type].push(callback);\r\n\t    return this;\r\n\t  }\r\n\r\n\t  /**\r\n\t   * @param  {string} type\r\n\t   * @param  {Object} data\r\n\t   * @return {SimpleDropzone}\r\n\t   */\r\n\t  _emit (type, data) {\r\n\t    this.listeners[type]\r\n\t      .forEach((callback) => callback(data));\r\n\t    return this;\r\n\t  }\r\n\r\n\t  /**\r\n\t   * Destroys the instance.\r\n\t   */\r\n\t  destroy () {\r\n\t    const el = this.el;\r\n\t    const inputEl = this.inputEl;\r\n\r\n\t    el.removeEventListener(this._onDragover);\r\n\t    el.removeEventListener(this._onDrop);\r\n\t    inputEl.removeEventListener(this._onSelect);\r\n\r\n\t    delete this.el;\r\n\t    delete this.inputEl;\r\n\t    delete this.listeners;\r\n\t  }\r\n\r\n\t  /**\r\n\t   * @param  {Event} e\r\n\t   */\r\n\t  _onDrop (e) {\r\n\t    e.stopPropagation();\r\n\t    e.preventDefault();\r\n\r\n\t    this._emit('dropstart');\r\n\r\n\t    let entries;\r\n\t    if (e.dataTransfer.items) {\r\n\t      entries = [].slice.call(e.dataTransfer.items)\r\n\t        .map((item) => item.webkitGetAsEntry());\r\n\t    } else if ((e.dataTransfer.files||[]).length === 1) {\r\n\t      const file = e.dataTransfer.files[0];\r\n\t      if (this._isZip(file)) {\r\n\t        this._loadZip(file);\r\n\t        return;\r\n\t      } else {\r\n\t        this._emit('drop', {files: new Map([[file.name, file]])});\r\n\t        return;\r\n\t      }\r\n\t    }\r\n\r\n\t    if (!entries) {\r\n\t      this._fail('Required drag-and-drop APIs are not supported in this browser.');\r\n\t    }\r\n\r\n\t    if (entries.length === 1 && entries[0].name.match(/\\.zip$/)) {\r\n\t      entries[0].file((file) => this._loadZip(file));\r\n\t    } else {\r\n\t      this._loadNextEntry(new Map(), entries);\r\n\t    }\r\n\t  }\r\n\r\n\t  /**\r\n\t   * @param  {Event} e\r\n\t   */\r\n\t  _onDragover (e) {\r\n\t    e.stopPropagation();\r\n\t    e.preventDefault();\r\n\t    e.dataTransfer.dropEffect = 'copy'; // Explicitly show this is a copy.\r\n\t  }\r\n\r\n\t  /**\r\n\t   * @param  {Event} e\r\n\t   */\r\n\t  _onSelect (e) {\r\n\t    this._emit('dropstart');\r\n\r\n\t    // HTML file inputs do not seem to support folders, so assume this is a flat file list.\r\n\t    const files = [].slice.call(this.inputEl.files);\r\n\r\n\t    // Automatically decompress a zip archive if it is the only file given.\r\n\t    if (files.length === 1 && this._isZip(files[0])) {\r\n\t      this._loadZip(files[0]);\r\n\t      return;\r\n\t    }\r\n\r\n\t    const fileMap = new Map();\r\n\t    files.forEach((file) => fileMap.set(file.name, file));\r\n\t    this._emit('drop', {files: fileMap});\r\n\t  }\r\n\r\n\t  /**\r\n\t   * Iterates through a list of FileSystemEntry objects, creates the fileMap\r\n\t   * tree, and emits the result.\r\n\t   * @param  {Map<string, File>} fileMap\r\n\t   * @param  {Array<FileSystemEntry>} entries\r\n\t   */\r\n\t  _loadNextEntry (fileMap, entries) {\r\n\t    const entry = entries.pop();\r\n\r\n\t    if (!entry) {\r\n\t      this._emit('drop', {files: fileMap});\r\n\t      return;\r\n\t    }\r\n\r\n\t    if (entry.isFile) {\r\n\t      entry.file((file) => {\r\n\t        fileMap.set(entry.fullPath, file);\r\n\t        this._loadNextEntry(fileMap, entries);\r\n\t      }, () => console.error('Could not load file: %s', entry.fullPath));\r\n\t    } else if (entry.isDirectory) {\r\n\t      // readEntries() must be called repeatedly until it stops returning results.\r\n\t      // https://www.w3.org/TR/2012/WD-file-system-api-20120417/#the-directoryreader-interface\r\n\t      // https://bugs.chromium.org/p/chromium/issues/detail?id=378883\r\n\t      const reader = entry.createReader();\r\n\t      const readerCallback = (newEntries) => {\r\n\t        if (newEntries.length) {\r\n\t          entries = entries.concat(newEntries);\r\n\t          reader.readEntries(readerCallback);\r\n\t        } else {\r\n\t          this._loadNextEntry(fileMap, entries);\r\n\t        }\r\n\t      };\r\n\t      reader.readEntries(readerCallback);\r\n\t    } else {\r\n\t      console.warn('Unknown asset type: ' + entry.fullPath);\r\n\t      this._loadNextEntry(fileMap, entries);\r\n\t    }\r\n\t  }\r\n\r\n\t  /**\r\n\t   * Inflates a File in .ZIP format, creates the fileMap tree, and emits the\r\n\t   * result.\r\n\t   * @param  {File} file\r\n\t   */\r\n\t  _loadZip (file) {\r\n\t    const pending = [];\r\n\t    const fileMap = new Map();\r\n\r\n\t    const traverse = (node) => {\r\n\t      if (node.directory) {\r\n\t        node.children.forEach(traverse);\r\n\t      } else if (node.name[0] !== '.') {\r\n\t        pending.push(new Promise((resolve) => {\r\n\t          node.getData(new zip.BlobWriter(), (blob) => {\r\n\t            blob.name = node.name;\r\n\t            fileMap.set(node.getFullname(), blob);\r\n\t            resolve();\r\n\t          });\r\n\t        }));\r\n\t      }\r\n\t    };\r\n\r\n\t    ZipLoader.unzip(file).then((archive) => {\r\n\t      Object.keys(archive.files).forEach((path) => {\r\n\t        if (path.match(/\\/$/)) return;\r\n\t        const fileName = path.replace(/^.*[\\\\\\/]/, '');\r\n\t        fileMap.set(path, new File([archive.files[path].buffer], fileName));\r\n\t      });\r\n\t      this._emit('drop', {files: fileMap, archive: file});\r\n\t    });\r\n\t  }\r\n\r\n\t  /**\r\n\t   * @param  {File} file\r\n\t   * @return {Boolean}\r\n\t   */\r\n\t  _isZip (file) {\r\n\t    return file.type === 'application/zip' || file.name.match(/\\.zip$/);\r\n\t  }\r\n\r\n\t  /**\r\n\t   * @param {string} message\r\n\t   * @throws\r\n\t   */\r\n\t  _fail (message) {\r\n\t    this._emit('droperror', {message: message});\r\n\t  }\r\n\t}\r\n\r\n\treturn threegltviewer.SimpleDropzone = SimpleDropzone;\r\n\r\n});\r\n\r\n "]}