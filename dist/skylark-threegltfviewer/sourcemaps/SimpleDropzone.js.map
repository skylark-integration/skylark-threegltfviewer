{"version":3,"sources":["SimpleDropzone.js"],"names":["define","Emitter","Deferred","elmx","files","plugins","jszip","threegltviewer","SimpleDropzone","Plugin","klassName","pluginName","options","selectors","picker","dropzone","pastezone","startUploads","cancelUploads","[object Object]","elm","super","this","_velm","_elm","_initFileHandlers","self","dzSelector","pzSelector","pkSelector","$","dropped","_addFile","pasted","multiple","picked","file","_isZip","_loadZip","emit","Map","name","fileMap","then","zip","defers","forEach","path","zipEntry","d","async","data","dir","set","Blob","resolve","push","promise","all","archive","type","match","message"],"mappings":";;;;;;;AAAAA,QACC,wBACA,+BACE,oBACD,qBAEA,uBAED,gBACA,oBACC,SACDC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAgKA,OAAOA,EAAeC,6BAxJOH,EAAQI,OACpCC,gBACI,MAAO,iBAGRC,iBACG,MAAO,sBAGbC,cACM,OACKC,WACEC,OAAW,eACXC,SAAW,iBACXC,UAAW,kBAEXC,aAAc,iBACdC,cAAe,oBAU3BC,YAAaC,EAAKR,GACjBS,MAAMD,EAAIR,GAENU,KAAKC,MAAQpB,EAAKmB,KAAKE,MAE3BF,KAAKG,oBAILN,oBACI,IAAIO,EAAOJ,KAEPT,EAAYS,KAAKV,QAAQC,UAC5Bc,EAAad,EAAUE,SACvBa,EAAaf,EAAUG,UACvBa,EAAahB,EAAUC,OAEpBa,GACTL,KAAKC,MAAMO,EAAEH,GAAYZ,UACZgB,QAAU,SAAU3B,GAChBsB,EAAKM,SAAS5B,EAAM,OAM5BwB,GACAN,KAAKC,MAAMO,EAAEF,GAAYZ,WACrBiB,OAAS,SAAU7B,GACfsB,EAAKM,SAAS5B,EAAM,OAK5ByB,GACAP,KAAKC,MAAMO,EAAED,GAAYf,QACrBoB,UAAU,EACVC,OAAS,SAAU/B,GACfsB,EAAKM,SAAS5B,EAAM,OAMnCe,SAASiB,GACLd,KAAKe,OAAOD,GACdd,KAAKgB,SAASF,GAEZd,KAAKiB,KAAK,QAASnC,MAAO,IAAIoC,MAAMJ,EAAKK,KAAML,OASrDjB,WASAA,SAAUiB,GACR,MACMM,EAAU,IAAIF,IAkBpBlC,EAAM8B,GAAMO,KAAMC,IACX,IAAIC,KAETD,EAAIE,QAAQ,CAACC,EAAKC,KAIf,IAAIC,EAAI,IAAI/C,EACV8C,EAASE,MAAM,eAAeP,KAAK,SAASQ,GACrCH,EAASI,KACZV,EAAQW,IAAIL,EAASP,KAAK,IAAIa,MAAMH,KAErCF,EAAEM,YAELV,EAAOW,KAAKP,EAAEQ,WAElBvD,EAASwD,IAAIb,GAAQF,KAAM,KAC1BrB,KAAKiB,KAAK,QAASnC,MAAOsC,EAASiB,QAASvB,QASlDjB,OAAQiB,GACN,MAAqB,oBAAdA,EAAKwB,MAA8BxB,EAAKK,KAAKoB,MAAM,UAO5D1C,MAAO2C,GACLxC,KAAKiB,KAAK,aAAcuB,QAASA","file":"../SimpleDropzone.js","sourcesContent":["define([\r\n\t\"skylark-langx-emitter\",\r\n\t\"skylark-langx-async/Deferred\",\r\n\t  \"skylark-domx-velm\",\r\n\t \"skylark-domx-files\",\r\n\r\n\t \"skylark-domx-plugins\",\r\n\r\n\t\"skylark-jszip\",\r\n\t\"./threegltviewer\"\r\n],function(\r\n\tEmitter, \r\n\tDeferred, \r\n\telmx,\r\n\tfiles,\r\n\tplugins,\r\n\tjszip,\r\n\tthreegltviewer\r\n) {\r\n\t//import ZipLoader from 'zip-loader';\r\n\r\n\t/**\r\n\t * Watches an element for file drops, parses to create a filemap hierarchy,\r\n\t * and emits the result.\r\n\t */\r\n\tclass SimpleDropzone extends plugins.Plugin {\r\n\t\tget klassName() {\r\n\t    \treturn \"SingleUploader\";\r\n    \t} \r\n\r\n    \tget pluginName(){\r\n      \t\treturn \"lark.singleuploader\";\r\n    \t} \r\n\r\n\t\tget options () {\r\n      \t\treturn {\r\n\t            selectors : {\r\n\t              picker   : \".file-picker\",\r\n\t              dropzone : \".file-dropzone\",\r\n\t              pastezone: \".file-pastezone\",\r\n\r\n\t              startUploads: '.start-uploads',\r\n\t              cancelUploads: '.cancel-uploads',\r\n\t            }\r\n\t     \t}\r\n\t\t}\r\n\r\n\r\n\t  /**\r\n\t   * @param  {Element} elm\r\n\t   * @param  [options] \r\n\t   */\r\n\t  constructor (elm, options) {\r\n\t  \tsuper(elm,options);\r\n\r\n        this._velm = elmx(this._elm);\r\n\r\n\t  \tthis._initFileHandlers();\r\n\r\n\t}\r\n\r\n    _initFileHandlers () {\r\n        var self = this;\r\n\r\n        var selectors = this.options.selectors,\r\n        \tdzSelector = selectors.dropzone,\r\n        \tpzSelector = selectors.pastezone,\r\n        \tpkSelector = selectors.picker;\r\n\r\n        if (dzSelector) {\r\n\t\t\tthis._velm.$(dzSelector).dropzone({\r\n                dropped : function (files) {\r\n                    self._addFile(files[0]);\r\n                }\r\n\t\t\t});\r\n        }\r\n\r\n\r\n        if (pzSelector) {\r\n            this._velm.$(pzSelector).pastezone({\r\n                pasted : function (files) {\r\n                    self._addFile(files[0]);\r\n                }\r\n            });                \r\n        }\r\n\r\n        if (pkSelector) {\r\n            this._velm.$(pkSelector).picker({\r\n                multiple: true,\r\n                picked : function (files) {\r\n                    self._addFile(files[0]);\r\n                }\r\n            });                \r\n        }\r\n    }\r\n\r\n     _addFile(file) {\r\n\t    if (this._isZip(file)) {\r\n\t      this._loadZip(file);\r\n\t    } else {\r\n\t        this.emit('drop', {files: new Map([[file.name, file]])});\t    \t\r\n\t    } \r\n\r\n     }\r\n\r\n\r\n\t  /**\r\n\t   * Destroys the instance.\r\n\t   */\r\n\t  destroy () {\r\n\t  }\r\n\r\n\r\n\t  /**\r\n\t   * Inflates a File in .ZIP format, creates the fileMap tree, and emits the\r\n\t   * result.\r\n\t   * @param  {File} file\r\n\t   */\r\n\t  _loadZip (file) {\r\n\t    const pending = [];\r\n\t    const fileMap = new Map();\r\n\r\n\t    const traverse = (node) => {\r\n\t      if (node.directory) {\r\n\t        node.children.forEach(traverse);\r\n\t      } else if (node.name[0] !== '.') {\r\n\t        pending.push(new Promise((resolve) => {\r\n\t          node.getData(new zip.BlobWriter(), (blob) => {\r\n\t            blob.name = node.name;\r\n\t            fileMap.set(node.getFullname(), blob);\r\n\t            resolve();\r\n\t          });\r\n\t        }));\r\n\t      }\r\n\t    };\r\n\r\n\t    var self = this;\r\n\r\n\t    jszip(file).then((zip) => {\r\n            var defers = [];\r\n\r\n\t     \tzip.forEach((path,zipEntry) => {\r\n\t        \t//if (path.match(/\\/$/)) return;\r\n\t        \t//const fileName = path.replace(/^.*[\\\\\\/]/, '');\r\n\t        \t//fileMap.set(path, new File([archive.files[path].buffer], fileName));\r\n\t        \tvar d = new Deferred();\r\n\t          \tzipEntry.async(\"arraybuffer\").then(function(data){\r\n\t            \tif (!zipEntry.dir) {\r\n\t             \t\tfileMap.set(zipEntry.name,new Blob([data]));\r\n\t            \t} \r\n             \t\td.resolve();\r\n\t          \t});\r\n\t          \tdefers.push(d.promise);\r\n\t      \t});\r\n\t      \tDeferred.all(defers).then( () =>{\r\n\t      \t\tthis.emit('drop', {files: fileMap, archive: file});\r\n\t      \t});\r\n\t    });\r\n\t  }\r\n\r\n\t  /**\r\n\t   * @param  {File} file\r\n\t   * @return {Boolean}\r\n\t   */\r\n\t  _isZip (file) {\r\n\t    return file.type === 'application/zip' || file.name.match(/\\.zip$/);\r\n\t  }\r\n\r\n\t  /**\r\n\t   * @param {string} message\r\n\t   * @throws\r\n\t   */\r\n\t  _fail (message) {\r\n\t    this.emit('droperror', {message: message});\r\n\t  }\r\n\t}\r\n\r\n\treturn threegltviewer.SimpleDropzone = SimpleDropzone;\r\n\r\n});\r\n\r\n "]}