{"version":3,"sources":["App.js"],"names":["define","WebGL","threegltviewer","Viewer","SimpleDropzone","App","[object Object]","el","location","hash","this","options","kiosk","Boolean","model","preset","cameraPosition","split","map","Number","viewer","viewerEl","spinnerEl","querySelector","dropEl","inputEl","createDropzone","hideSpinner","document","style","display","view","Map","dropCtrl","on","files","load","showSpinner","createElement","classList","add","innerHTML","appendChild","fileMap","rootFile","rootPath","Array","from","forEach","path","file","name","match","replace","onError","clear","createViewer","fileURL","URL","createObjectURL","cleanup","revokeObjectURL","catch","e","then","gltf","error","message","toString","target","Image","src","pop","window","alert","console"],"mappings":";;;;;;;AAAAA,QACI,2BACA,mBACA,WACA,oBACD,SAAUC,EAAOC,EAAeC,EAAQC,GACvC,aAsGA,OAAOF,EAAeG,UAnGlBC,YAAYC,EAAIC,GAEZ,MAAMC,KACNC,KAAKC,SACDC,MAAOC,QAAQJ,EAAKG,OACpBE,MAAOL,EAAKK,OAAS,GACrBC,OAAQN,EAAKM,QAAU,GACvBC,eAAgBP,EAAKO,eAAiBP,EAAKO,eAAeC,MAAM,KAAKC,IAAIC,QAAU,MAEvFT,KAAKH,GAAKA,EACVG,KAAKU,OAAS,KACdV,KAAKW,SAAW,KAChBX,KAAKY,UAAYf,EAAGgB,cAAc,YAClCb,KAAKc,OAASjB,EAAGgB,cAAc,aAC/Bb,KAAKe,QAAUlB,EAAGgB,cAAc,eAEhCb,KAAKgB,iBACLhB,KAAKiB,cACL,MAAMhB,EAAUD,KAAKC,QACjBA,EAAQC,QACSgB,SAASL,cAAc,UAC/BM,MAAMC,QAAU,QAEzBnB,EAAQG,OACRJ,KAAKqB,KAAKpB,EAAQG,MAAO,GAAI,IAAIkB,KAIzC1B,iBACI,MAAM2B,EAAW,IAAI7B,EAAeM,KAAKc,OAAQd,KAAKe,SACtDQ,EAASC,GAAG,OAAQ,EAAEC,MAAAA,KAAWzB,KAAK0B,KAAKD,IAC3CF,EAASC,GAAG,YAAa,IAAMxB,KAAK2B,eACpCJ,EAASC,GAAG,YAAa,IAAMxB,KAAKiB,eAGxCrB,eAMI,OALAI,KAAKW,SAAWO,SAASU,cAAc,OACvC5B,KAAKW,SAASkB,UAAUC,IAAI,UAC5B9B,KAAKc,OAAOiB,UAAY,GACxB/B,KAAKc,OAAOkB,YAAYhC,KAAKW,UAC7BX,KAAKU,OAAS,IAAIjB,EAAOO,KAAKW,SAAUX,KAAKC,SACtCD,KAAKU,OAGhBd,KAAKqC,GACD,IAAIC,EACAC,EACJC,MAAMC,KAAKJ,GAASK,QAAQ,EAAEC,EAAMC,MAC5BA,EAAKC,KAAKC,MAAM,mBAChBR,EAAWM,EACXL,EAAWI,EAAKI,QAAQH,EAAKC,KAAM,OAGtCP,GACDlC,KAAK4C,QAAQ,iCAEjB5C,KAAKqB,KAAKa,EAAUC,EAAUF,GAGlCrC,KAAKsC,EAAUC,EAAUF,GACjBjC,KAAKU,QACLV,KAAKU,OAAOmC,QAChB,MAAMnC,EAASV,KAAKU,QAAUV,KAAK8C,eAC7BC,EAA8B,iBAAbb,EAAwBA,EAAWc,IAAIC,gBAAgBf,GACxEgB,EAAU,KACZlD,KAAKiB,cACmB,iBAAbiB,GACPc,IAAIG,gBAAgBJ,IAE5BrC,EAAOgB,KAAKqB,EAASZ,EAAUF,GAASmB,MAAMC,GAAKrD,KAAK4C,QAAQS,IAAIC,KAAKC,IAIrEL,MAIRtD,QAAQ4D,GACJ,IAAIC,GAAWD,OAAaC,SAAWD,EAAME,WACzCD,EAAQf,MAAM,iBACde,EAAU,0EACHA,EAAQf,MAAM,oBACrBe,2EAAoFA,KAC7ED,GAASA,EAAMG,QAAUH,EAAMG,kBAAkBC,QACxDH,EAAU,oBAAsBD,EAAMG,OAAOE,IAAItD,MAAM,KAAKuD,OAEhEC,OAAOC,MAAMP,GACbQ,QAAQT,MAAMA,GAGlB5D,cACII,KAAKY,UAAUO,MAAMC,QAAU,GAGnCxB,cACII,KAAKY,UAAUO,MAAMC,QAAU","file":"../App.js","sourcesContent":["define([\n    'skylark-threejs-ex/WebGL',\n    \"./threegltviewer\",\n    './Viewer',\n    './SimpleDropzone'\n], function (WebGL, threegltviewer,Viewer, SimpleDropzone) {\n    'use strict';\n    \n    class App {\n        constructor(el, location) {\n            //const hash = location.hash ? queryString.parse(location.hash) : {};\n            const hash = {};\n            this.options = {\n                kiosk: Boolean(hash.kiosk),\n                model: hash.model || '',\n                preset: hash.preset || '',\n                cameraPosition: hash.cameraPosition ? hash.cameraPosition.split(',').map(Number) : null\n            };\n            this.el = el;\n            this.viewer = null;\n            this.viewerEl = null;\n            this.spinnerEl = el.querySelector('.spinner');\n            this.dropEl = el.querySelector('.dropzone');\n            this.inputEl = el.querySelector('#file-input');\n            //this.validationCtrl = new Validation(el);\n            this.createDropzone();\n            this.hideSpinner();\n            const options = this.options;\n            if (options.kiosk) {\n                const headerEl = document.querySelector('header');\n                headerEl.style.display = 'none';\n            }\n            if (options.model) {\n                this.view(options.model, '', new Map());\n            }\n        }\n\n        createDropzone() {\n            const dropCtrl = new SimpleDropzone(this.dropEl, this.inputEl);\n            dropCtrl.on('drop', ({files}) => this.load(files));\n            dropCtrl.on('dropstart', () => this.showSpinner());\n            dropCtrl.on('droperror', () => this.hideSpinner());\n        }\n\n        createViewer() {\n            this.viewerEl = document.createElement('div');\n            this.viewerEl.classList.add('viewer');\n            this.dropEl.innerHTML = '';\n            this.dropEl.appendChild(this.viewerEl);\n            this.viewer = new Viewer(this.viewerEl, this.options);\n            return this.viewer;\n        }\n\n        load(fileMap) {\n            let rootFile;\n            let rootPath;\n            Array.from(fileMap).forEach(([path, file]) => {\n                if (file.name.match(/\\.(gltf|glb)$/)) {\n                    rootFile = file;\n                    rootPath = path.replace(file.name, '');\n                }\n            });\n            if (!rootFile) {\n                this.onError('No .gltf or .glb asset found.');\n            }\n            this.view(rootFile, rootPath, fileMap);\n        }\n\n        view(rootFile, rootPath, fileMap) {\n            if (this.viewer)\n                this.viewer.clear();\n            const viewer = this.viewer || this.createViewer();\n            const fileURL = typeof rootFile === 'string' ? rootFile : URL.createObjectURL(rootFile);\n            const cleanup = () => {\n                this.hideSpinner();\n                if (typeof rootFile === 'object')\n                    URL.revokeObjectURL(fileURL);\n            };\n            viewer.load(fileURL, rootPath, fileMap).catch(e => this.onError(e)).then(gltf => {\n                //if (!this.options.kiosk) {\n                //    this.validationCtrl.validate(fileURL, rootPath, fileMap, gltf);\n                //}\n                cleanup();\n            });\n        }\n\n        onError(error) {\n            let message = (error || {}).message || error.toString();\n            if (message.match(/ProgressEvent/)) {\n                message = 'Unable to retrieve this file. Check JS console and browser network tab.';\n            } else if (message.match(/Unexpected token/)) {\n                message = `Unable to parse file content. Verify that this file is valid. Error: \"${ message }\"`;\n            } else if (error && error.target && error.target instanceof Image) {\n                message = 'Missing texture: ' + error.target.src.split('/').pop();\n            }\n            window.alert(message);\n            console.error(error);\n        }\n\n        showSpinner() {\n            this.spinnerEl.style.display = '';\n        }\n\n        hideSpinner() {\n            this.spinnerEl.style.display = 'none';\n        }\n    }\n\n    return threegltviewer.App = App;\n});"]}