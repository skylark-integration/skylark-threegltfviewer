{"version":3,"sources":["vignettes.js"],"names":["define","THREE","threegltviewer","vert","join","frag","vignettes","createBackground","opt","geometry","PlaneGeometry","material","RawShaderMaterial","vertexShader","fragmentShader","side","DoubleSide","uniforms","aspectCorrection","type","value","aspect","grainScale","grainTime","noiseAlpha","offset","Vector2","scale","smooth","color1","Color","color2","depthTest","mesh","Mesh","frustumCulled","style","Array","isArray","colors","map","c","copy","fromArray","Boolean","array","VectorType"],"mappings":";;;;;;;AAAAA,QACI,kBACA,oBACD,SAAUC,EAAMC,GACf,aACA,MAAMC,GACM,2BACA,gCACA,iCACA,oBACA,gBACA,uCACA,oDACA,KACEC,KAAK,MACbC,GACM,2BACA,sDACA,4DACA,GACA,uBACA,uBACA,wBACA,uBACA,sBACA,4BACA,iCACA,4BACA,2BACA,uBACA,GACA,oBACA,GACA,gBACA,8BACA,4BACA,qBACA,MACA,gBACA,iBACA,2BACA,+CACA,2CACA,GACA,gDACA,sCACA,oEACA,+CACA,6DACA,aACA,gCACA,MACA,0BACA,KACED,KAAK,MAiHnB,OAAOF,EAAeI,WAAcC,iBA/GpC,SAA0BC,GAEtB,IAAIC,GADJD,EAAMA,OACaC,UAAY,IAAIR,EAAMS,cAAc,EAAG,EAAG,GACzDC,EAAW,IAAIV,EAAMW,mBACrBC,aAAcV,EACdW,eAAgBT,EAChBU,KAAMd,EAAMe,WACZC,UACIC,kBACIC,KAAM,IACNC,OAAO,GAEXC,QACIF,KAAM,IACNC,MAAO,GAEXE,YACIH,KAAM,IACNC,MAAO,MAEXG,WACIJ,KAAM,IACNC,MAAO,GAEXI,YACIL,KAAM,IACNC,MAAO,KAEXK,QACIN,KAAM,KACNC,MAAO,IAAInB,EAAMyB,QAAQ,EAAG,IAEhCC,OACIR,KAAM,KACNC,MAAO,IAAInB,EAAMyB,QAAQ,EAAG,IAEhCE,QACIT,KAAM,KACNC,MAAO,IAAInB,EAAMyB,QAAQ,EAAG,IAEhCG,QACIV,KAAM,IACNC,MAAO,IAAInB,EAAM6B,MAAM,SAE3BC,QACIZ,KAAM,IACNC,MAAO,IAAInB,EAAM6B,MAAM,aAG/BE,WAAW,IAEXC,EAAO,IAAIhC,EAAMiC,KAAKzB,EAAUE,GAKpC,OAJAsB,EAAKE,eAAgB,EACrBF,EAAKG,MAIL,SAAe5B,GAEX,GADAA,EAAMA,MACF6B,MAAMC,QAAQ9B,EAAI+B,QAAS,CAC3B,IAAIA,EAAS/B,EAAI+B,OAAOC,IAAI,SAAUC,GAClC,MAAiB,iBAANA,GAA+B,iBAANA,EACzB,IAAIxC,EAAM6B,MAAMW,GAEpBA,IAEX9B,EAASM,SAASY,OAAOT,MAAMsB,KAAKH,EAAO,IAC3C5B,EAASM,SAASc,OAAOX,MAAMsB,KAAKH,EAAO,IAW/C,GAT0B,iBAAf/B,EAAIa,SACXV,EAASM,SAASI,OAAOD,MAAQZ,EAAIa,QAEX,iBAAnBb,EAAIc,aACXX,EAASM,SAASK,WAAWF,MAAQZ,EAAIc,YAEhB,iBAAlBd,EAAIe,YACXZ,EAASM,SAASM,UAAUH,MAAQZ,EAAIe,WAExCf,EAAIoB,OAAQ,CACZ,IAAIA,EAASe,EAAUnC,EAAIoB,OAAQ3B,EAAMyB,SACzCf,EAASM,SAASW,OAAOR,MAAMsB,KAAKd,GAExC,GAAIpB,EAAIiB,OAAQ,CACZ,IAAIA,EAASkB,EAAUnC,EAAIiB,OAAQxB,EAAMyB,SACzCf,EAASM,SAASQ,OAAOL,MAAMsB,KAAKjB,GAKxC,GAH8B,iBAAnBjB,EAAIgB,aACXb,EAASM,SAASO,WAAWJ,MAAQZ,EAAIgB,iBAEpB,IAAdhB,EAAImB,MAAuB,CAClC,IAAIA,EAAQnB,EAAImB,MACK,iBAAVA,IACPA,GACIA,EACAA,IAGRA,EAAQgB,EAAUhB,EAAO1B,EAAMyB,SAC/Bf,EAASM,SAASU,MAAMP,MAAMsB,KAAKf,QAEH,IAAzBnB,EAAIU,mBACXP,EAASM,SAASC,iBAAiBE,MAAQwB,QAAQpC,EAAIU,oBA/C3DV,GACAyB,EAAKG,MAAM5B,GACRyB,EAgDP,SAASU,EAAUE,EAAOC,GACtB,OAAIT,MAAMC,QAAQO,IACP,IAAIC,GAAaH,UAAUE,GAE/BA","file":"../vignettes.js","sourcesContent":["define([\r\n    'skylark-threejs',\r\n    \"./threegltviewer\"\r\n], function (THREE,threegltviewer) {\r\n    'use strict';\r\n    const vert = [\r\n                'attribute vec3 position;',\r\n                'uniform mat4 modelViewMatrix;',\r\n                'uniform mat4 projectionMatrix;',\r\n                'varying vec2 vUv;',\r\n                'void main() {',\r\n                '\\tgl_Position = vec4(position, 1.0);',\r\n                '\\tvUv = vec2(position.x, position.y) * 0.5 + 0.5;',\r\n                '}'\r\n                ].join('\\n'),\r\n          frag = [\r\n                'precision mediump float;',\r\n                '#pragma glslify: grain = require(\\'glsl-film-grain\\')',\r\n                '#pragma glslify: blend = require(\\'glsl-blend-soft-light\\')',\r\n                '',\r\n                'uniform vec3 color1;',\r\n                'uniform vec3 color2;',\r\n                'uniform float aspect;',\r\n                'uniform vec2 offset;',\r\n                'uniform vec2 scale;',\r\n                'uniform float noiseAlpha;',\r\n                'uniform bool aspectCorrection;',\r\n                'uniform float grainScale;',\r\n                'uniform float grainTime;',\r\n                'uniform vec2 smooth;',\r\n                '',\r\n                'varying vec2 vUv;',\r\n                '',\r\n                'void main() {',\r\n                '\\tvec2 q = vec2(vUv - 0.5);',\r\n                '\\tif (aspectCorrection) {',\r\n                '\\t\\tq.x *= aspect;',\r\n                '\\t}',\r\n                '\\tq /= scale;',\r\n                '\\tq -= offset;',\r\n                '\\tfloat dst = length(q);',\r\n                '\\tdst = smoothstep(smooth.x, smooth.y, dst);',\r\n                '\\tvec3 color = mix(color1, color2, dst);',\r\n                '',\r\n                '\\tif (noiseAlpha > 0.0 && grainScale > 0.0) {',\r\n                '\\t\\tfloat gSize = 1.0 / grainScale;',\r\n                '\\t\\tfloat g = grain(vUv, vec2(gSize * aspect, gSize), grainTime);',\r\n                '\\t\\tvec3 noiseColor = blend(color, vec3(g));',\r\n                '\\t\\tgl_FragColor.rgb = mix(color, noiseColor, noiseAlpha);',\r\n                '\\t} else {',\r\n                '\\t\\tgl_FragColor.rgb = color;',\r\n                '\\t}',\r\n                '\\tgl_FragColor.a = 1.0;',\r\n                '}'\r\n                ].join('\\n');\r\n\r\n    function createBackground(opt) {\r\n        opt = opt || {};\r\n        var geometry = opt.geometry || new THREE.PlaneGeometry(2, 2, 1);\r\n        var material = new THREE.RawShaderMaterial({\r\n            vertexShader: vert,\r\n            fragmentShader: frag,\r\n            side: THREE.DoubleSide,\r\n            uniforms: {\r\n                aspectCorrection: {\r\n                    type: 'i',\r\n                    value: false\r\n                },\r\n                aspect: {\r\n                    type: 'f',\r\n                    value: 1\r\n                },\r\n                grainScale: {\r\n                    type: 'f',\r\n                    value: 0.005\r\n                },\r\n                grainTime: {\r\n                    type: 'f',\r\n                    value: 0\r\n                },\r\n                noiseAlpha: {\r\n                    type: 'f',\r\n                    value: 0.25\r\n                },\r\n                offset: {\r\n                    type: 'v2',\r\n                    value: new THREE.Vector2(0, 0)\r\n                },\r\n                scale: {\r\n                    type: 'v2',\r\n                    value: new THREE.Vector2(1, 1)\r\n                },\r\n                smooth: {\r\n                    type: 'v2',\r\n                    value: new THREE.Vector2(0, 1)\r\n                },\r\n                color1: {\r\n                    type: 'c',\r\n                    value: new THREE.Color('#fff')\r\n                },\r\n                color2: {\r\n                    type: 'c',\r\n                    value: new THREE.Color('#283844')\r\n                }\r\n            },\r\n            depthTest: false\r\n        });\r\n        var mesh = new THREE.Mesh(geometry, material);\r\n        mesh.frustumCulled = false;\r\n        mesh.style = style;\r\n        if (opt)\r\n            mesh.style(opt);\r\n        return mesh;\r\n        function style(opt) {\r\n            opt = opt || {};\r\n            if (Array.isArray(opt.colors)) {\r\n                var colors = opt.colors.map(function (c) {\r\n                    if (typeof c === 'string' || typeof c === 'number') {\r\n                        return new THREE.Color(c);\r\n                    }\r\n                    return c;\r\n                });\r\n                material.uniforms.color1.value.copy(colors[0]);\r\n                material.uniforms.color2.value.copy(colors[1]);\r\n            }\r\n            if (typeof opt.aspect === 'number') {\r\n                material.uniforms.aspect.value = opt.aspect;\r\n            }\r\n            if (typeof opt.grainScale === 'number') {\r\n                material.uniforms.grainScale.value = opt.grainScale;\r\n            }\r\n            if (typeof opt.grainTime === 'number') {\r\n                material.uniforms.grainTime.value = opt.grainTime;\r\n            }\r\n            if (opt.smooth) {\r\n                var smooth = fromArray(opt.smooth, THREE.Vector2);\r\n                material.uniforms.smooth.value.copy(smooth);\r\n            }\r\n            if (opt.offset) {\r\n                var offset = fromArray(opt.offset, THREE.Vector2);\r\n                material.uniforms.offset.value.copy(offset);\r\n            }\r\n            if (typeof opt.noiseAlpha === 'number') {\r\n                material.uniforms.noiseAlpha.value = opt.noiseAlpha;\r\n            }\r\n            if (typeof opt.scale !== 'undefined') {\r\n                var scale = opt.scale;\r\n                if (typeof scale === 'number') {\r\n                    scale = [\r\n                        scale,\r\n                        scale\r\n                    ];\r\n                }\r\n                scale = fromArray(scale, THREE.Vector2);\r\n                material.uniforms.scale.value.copy(scale);\r\n            }\r\n            if (typeof opt.aspectCorrection !== 'undefined') {\r\n                material.uniforms.aspectCorrection.value = Boolean(opt.aspectCorrection);\r\n            }\r\n        }\r\n        function fromArray(array, VectorType) {\r\n            if (Array.isArray(array)) {\r\n                return new VectorType().fromArray(array);\r\n            }\r\n            return array;\r\n        }\r\n    }\r\n    return threegltviewer.vignettes = { createBackground };\r\n});"]}