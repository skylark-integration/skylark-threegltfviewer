{"version":3,"sources":["skylark-threegltfviewer.js"],"names":["define","skylark","attach","WEBGL","isWebGLAvailable","canvas","document","createElement","window","WebGLRenderingContext","getContext","e","isWebGL2Available","WebGL2RenderingContext","getWebGLErrorMessage","this","getErrorMessage","getWebGL2ErrorMessage","version","contexts","1","2","message","element","id","style","fontFamily","fontSize","fontWeight","textAlign","background","color","padding","width","margin","replace","innerHTML","Stats","mode","container","addPanel","panel","appendChild","dom","showPanel","i","children","length","display","cssText","addEventListener","event","preventDefault","beginTime","performance","Date","now","prevTime","frames","fpsPanel","Panel","msPanel","self","memory","memPanel","REVISION","begin","end","time","update","usedJSHeapSize","jsHeapSizeLimit","domElement","setMode","name","fg","bg","min","Infinity","max","round","Math","PR","devicePixelRatio","WIDTH","HEIGHT","TEXT_X","TEXT_Y","GRAPH_X","GRAPH_Y","GRAPH_WIDTH","GRAPH_HEIGHT","height","context","font","textBaseline","fillStyle","fillRect","fillText","globalAlpha","value","maxValue","drawImage","THREE","OrbitControls","object","offset","quat","quatInverse","lastPosition","lastQuaternion","undefined","console","warn","error","enabled","target","Vector3","minDistance","maxDistance","minZoom","maxZoom","minPolarAngle","maxPolarAngle","PI","minAzimuthAngle","maxAzimuthAngle","enableDamping","dampingFactor","enableZoom","zoomSpeed","enableRotate","rotateSpeed","enablePan","panSpeed","screenSpacePanning","keyPanSpeed","autoRotate","autoRotateSpeed","enableKeys","keys","LEFT","UP","RIGHT","BOTTOM","mouseButtons","MOUSE","ROTATE","MIDDLE","DOLLY","PAN","touches","ONE","TOUCH","TWO","DOLLY_PAN","target0","clone","position0","position","zoom0","zoom","getPolarAngle","spherical","phi","getAzimuthalAngle","theta","saveState","scope","copy","reset","updateProjectionMatrix","dispatchEvent","changeEvent","state","STATE","NONE","Quaternion","setFromUnitVectors","up","inverse","sub","applyQuaternion","setFromVector3","rotateLeft","sphericalDelta","makeSafe","radius","scale","addScaledVector","panOffset","add","setFromSpherical","lookAt","multiplyScalar","set","zoomChanged","distanceToSquared","EPS","dot","quaternion","dispose","removeEventListener","onContextMenu","onMouseDown","onMouseWheel","onTouchStart","onTouchEnd","onTouchMove","onMouseMove","onMouseUp","onKeyDown","type","startEvent","endEvent","TOUCH_ROTATE","TOUCH_PAN","TOUCH_DOLLY_PAN","TOUCH_DOLLY_ROTATE","Spherical","rotateStart","Vector2","rotateEnd","rotateDelta","panStart","panEnd","panDelta","dollyStart","dollyEnd","dollyDelta","getZoomScale","pow","angle","rotateUp","v","panLeft","distance","objectMatrix","setFromMatrixColumn","panUp","crossVectors","pan","deltaX","deltaY","isPerspectiveCamera","targetDistance","tan","fov","clientHeight","matrix","isOrthographicCamera","right","left","clientWidth","top","bottom","dollyOut","dollyScale","dollyIn","handleMouseDownRotate","clientX","clientY","handleMouseDownPan","handleTouchStartRotate","pageX","pageY","x","y","handleTouchStartPan","handleTouchStartDolly","dx","dy","sqrt","handleTouchMoveRotate","subVectors","handleTouchMovePan","handleTouchMoveDolly","mouseAction","focus","button","handleMouseDownDolly","ctrlKey","metaKey","shiftKey","handleMouseMoveRotate","handleMouseMoveDolly","handleMouseMovePan","stopPropagation","handleMouseWheel","needsUpdate","keyCode","handleKeyDown","handleTouchStartDollyPan","DOLLY_ROTATE","handleTouchStartDollyRotate","handleTouchMoveDollyPan","handleTouchMoveDollyRotate","tabIndex","prototype","Object","create","EventDispatcher","constructor","RGBELoader","manager","DataTextureLoader","call","UnsignedByteType","assign","parse","buffer","rgbe_error","rgbe_error_code","msg","fgets","lineLimit","consume","p","pos","len","s","chunk","String","fromCharCode","apply","Uint16Array","subarray","indexOf","byteLength","slice","RGBEByteToRGBFloat","sourceArray","sourceOffset","destArray","destOffset","RGBEByteToRGBHalf","floatView","Float32Array","int32View","Int32Array","toHalf","val","bits","m","byteArray","Uint8Array","rgbe_header_info","line","match","gamma_re","exposure_re","format_re","dimensions_re","header","valid","string","comments","programtype","format","gamma","exposure","charAt","parseFloat","parseInt","RGBE_ReadHeader","w","h","image_rgba_data","data_rgba","count","byteValue","scanline_buffer","ptr","ptr_end","l","off","isEncodedRun","rgbeStart","scanline_width","num_scanlines","RGBE_ReadPixels_RLE","data","RGBEFormat","FloatType","numElements","floatArray","j","RGBFormat","HalfFloatType","halfArray","setDataType","load","url","onLoad","onProgress","onError","texture","texData","encoding","RGBEEncoding","minFilter","NearestFilter","magFilter","generateMipmaps","flipY","LinearEncoding","LinearFilter","threegltviewer","environments","path","vert","join","frag","vignettes","createBackground","opt","geometry","PlaneGeometry","material","RawShaderMaterial","vertexShader","fragmentShader","side","DoubleSide","uniforms","aspectCorrection","aspect","grainScale","grainTime","noiseAlpha","smooth","color1","Color","color2","depthTest","mesh","Mesh","frustumCulled","Array","isArray","colors","map","c","fromArray","Boolean","array","VectorType","GLTFLoader","DRACOLoader","datgui","DEFAULT_CAMERA","IS_IOS","test","navigator","userAgent","MSStream","MAP_NAMES","Preset","ASSET_GENERATOR","Cache","traverseMaterials","callback","traverse","node","isMesh","materials","forEach","[object Object]","el","options","lights","content","mixer","clips","gui","environment","preset","find","playbackSpeed","actionStates","camera","wireframe","skeleton","grid","addLights","textureEncoding","ambientIntensity","ambientColor","directIntensity","directColor","bgColor1","bgColor2","stats","child","scene","Scene","defaultCamera","PerspectiveCamera","activeCamera","renderer","WebGLRenderer","antialias","physicallyCorrectLights","outputEncoding","sRGBEncoding","setClearColor","setPixelRatio","setSize","pmremGenerator","PMREMGenerator","compileEquirectangularShader","controls","vignette","renderOrder","cameraCtrl","cameraFolder","animFolder","animCtrls","morphFolder","morphCtrls","skeletonHelpers","gridHelper","axesHelper","addAxesHelper","addGUI","kiosk","close","animate","bind","requestAnimationFrame","resize","dt","render","axesCamera","axesScene","axesRenderer","parentElement","axesDiv","rootPath","assetMap","baseURL","LoaderUtils","extractUrlBase","Promise","resolve","reject","LoadingManager","setURLModifier","normalizedURL","decodeURI","has","blob","get","blobURL","URL","createObjectURL","blobURLs","push","loader","b","setCrossOrigin","dracoLoader","setDecoderPath","setDRACOLoader","gltf","scenes","animations","Error","setContent","revokeObjectURL","clear","box","Box3","setFromObject","size","getSize","center","getCenter","z","near","far","cameraPosition","setCamera","axesCorner","isLight","depthWrite","transparent","setClips","updateLights","updateGUI","updateEnvironment","updateTextureEncoding","updateDisplay","info","printGraph","group","groupEnd","stopAllAction","uncacheRoot","getRoot","AnimationMixer","clip","clipAction","play","isCamera","emissiveMap","removeLights","toneMappingExposure","intensity","setHex","hemiLight","HemisphereLight","light1","AmbientLight","light2","DirectionalLight","light","parent","remove","g","filter","entry","getCubeMapTexture","then","envMap","fromEquirectangular","helper","SkeletonHelper","bones","linewidth","GridHelper","AxesHelper","onBeforeRender","clearDepth","classList","alpha","autoPlace","hideable","dispFolder","addFolder","envBackgroundCtrl","onChange","wireframeCtrl","skeletonCtrl","gridCtrl","bgColor1Ctrl","addColor","bgColor2Ctrl","updateBackground","lightFolder","encodingCtrl","sRGB","Linear","Number","envMapCtrl","env","listen","ctrl","playbackSpeedCtrl","speed","timeScale","playAll","playAllClips","perfFolder","perfLi","__ul","guiWrap","open","cameraNames","morphMeshes","morphTargetInfluences","cameraOptions","concat","nameCtrl","morphTargetDictionary","key","clipIndex","action","playAnimation","setEffectiveTimeScale","stop","Emitter","jszip","SimpleDropzone","inputEl","listeners","drop","dropstart","droperror","_onDragover","_onDrop","_onSelect","entries","_emit","dataTransfer","items","item","webkitGetAsEntry","files","file","_isZip","_loadZip","Map","_fail","_loadNextEntry","dropEffect","fileMap","pop","isFile","fullPath","isDirectory","reader","createReader","readerCallback","newEntries","readEntries","ZipLoader","unzip","archive","fileName","File","WebGL","Viewer","App","location","hash","model","split","viewer","viewerEl","spinnerEl","querySelector","dropEl","createDropzone","hideSpinner","headerEl","view","dropCtrl","on","showSpinner","rootFile","from","createViewer","fileURL","cleanup","catch","toString","Image","src","alert","main"],"mappings":"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","file":"../skylark-threegltfviewer.js","sourcesContent":["define('skylark-threegltfviewer/threegltviewer',[\r\n\t\"skylark-langx-ns\"\r\n],function(skylark){\r\n\treturn skylark.attach(\"intg.threegltviewer\",{})\r\n});\ndefine('skylark-threejs-ex/WebGL',[],function () {\r\n    'use strict';\r\n    var WEBGL = {\r\n        isWebGLAvailable: function () {\r\n            try {\r\n                var canvas = document.createElement('canvas');\r\n                return !!(window.WebGLRenderingContext && (canvas.getContext('webgl') || canvas.getContext('experimental-webgl')));\r\n            } catch (e) {\r\n                return false;\r\n            }\r\n        },\r\n        isWebGL2Available: function () {\r\n            try {\r\n                var canvas = document.createElement('canvas');\r\n                return !!(window.WebGL2RenderingContext && canvas.getContext('webgl2'));\r\n            } catch (e) {\r\n                return false;\r\n            }\r\n        },\r\n        getWebGLErrorMessage: function () {\r\n            return this.getErrorMessage(1);\r\n        },\r\n        getWebGL2ErrorMessage: function () {\r\n            return this.getErrorMessage(2);\r\n        },\r\n        getErrorMessage: function (version) {\r\n            var names = {\r\n                1: 'WebGL',\r\n                2: 'WebGL 2'\r\n            };\r\n            var contexts = {\r\n                1: window.WebGLRenderingContext,\r\n                2: window.WebGL2RenderingContext\r\n            };\r\n            var message = 'Your $0 does not seem to support <a href=\"http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation\" style=\"color:#000\">$1</a>';\r\n            var element = document.createElement('div');\r\n            element.id = 'webglmessage';\r\n            element.style.fontFamily = 'monospace';\r\n            element.style.fontSize = '13px';\r\n            element.style.fontWeight = 'normal';\r\n            element.style.textAlign = 'center';\r\n            element.style.background = '#fff';\r\n            element.style.color = '#000';\r\n            element.style.padding = '1.5em';\r\n            element.style.width = '400px';\r\n            element.style.margin = '5em auto 0';\r\n            if (contexts[version]) {\r\n                message = message.replace('$0', 'graphics card');\r\n            } else {\r\n                message = message.replace('$0', 'browser');\r\n            }\r\n            message = message.replace('$1', names[version]);\r\n            element.innerHTML = message;\r\n            return element;\r\n        }\r\n    };\r\n    return WEBGL;\r\n});\ndefine('skylark-threejs-ex/utils/stats',[],function(){\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tvar Stats = function () {\r\n\r\n\t\tvar mode = 0;\r\n\r\n\t\tvar container = document.createElement( 'div' );\r\n\t\tcontainer.style.cssText = 'position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000';\r\n\t\tcontainer.addEventListener( 'click', function ( event ) {\r\n\r\n\t\t\tevent.preventDefault();\r\n\t\t\tshowPanel( ++ mode % container.children.length );\r\n\r\n\t\t}, false );\r\n\r\n\t\t//\r\n\r\n\t\tfunction addPanel( panel ) {\r\n\r\n\t\t\tcontainer.appendChild( panel.dom );\r\n\t\t\treturn panel;\r\n\r\n\t\t}\r\n\r\n\t\tfunction showPanel( id ) {\r\n\r\n\t\t\tfor ( var i = 0; i < container.children.length; i ++ ) {\r\n\r\n\t\t\t\tcontainer.children[ i ].style.display = i === id ? 'block' : 'none';\r\n\r\n\t\t\t}\r\n\r\n\t\t\tmode = id;\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tvar beginTime = ( performance || Date ).now(), prevTime = beginTime, frames = 0;\r\n\r\n\t\tvar fpsPanel = addPanel( new Stats.Panel( 'FPS', '#0ff', '#002' ) );\r\n\t\tvar msPanel = addPanel( new Stats.Panel( 'MS', '#0f0', '#020' ) );\r\n\r\n\t\tif ( self.performance && self.performance.memory ) {\r\n\r\n\t\t\tvar memPanel = addPanel( new Stats.Panel( 'MB', '#f08', '#201' ) );\r\n\r\n\t\t}\r\n\r\n\t\tshowPanel( 0 );\r\n\r\n\t\treturn {\r\n\r\n\t\t\tREVISION: 16,\r\n\r\n\t\t\tdom: container,\r\n\r\n\t\t\taddPanel: addPanel,\r\n\t\t\tshowPanel: showPanel,\r\n\r\n\t\t\tbegin: function () {\r\n\r\n\t\t\t\tbeginTime = ( performance || Date ).now();\r\n\r\n\t\t\t},\r\n\r\n\t\t\tend: function () {\r\n\r\n\t\t\t\tframes ++;\r\n\r\n\t\t\t\tvar time = ( performance || Date ).now();\r\n\r\n\t\t\t\tmsPanel.update( time - beginTime, 200 );\r\n\r\n\t\t\t\tif ( time >= prevTime + 1000 ) {\r\n\r\n\t\t\t\t\tfpsPanel.update( ( frames * 1000 ) / ( time - prevTime ), 100 );\r\n\r\n\t\t\t\t\tprevTime = time;\r\n\t\t\t\t\tframes = 0;\r\n\r\n\t\t\t\t\tif ( memPanel ) {\r\n\r\n\t\t\t\t\t\tvar memory = performance.memory;\r\n\t\t\t\t\t\tmemPanel.update( memory.usedJSHeapSize / 1048576, memory.jsHeapSizeLimit / 1048576 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn time;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tupdate: function () {\r\n\r\n\t\t\t\tbeginTime = this.end();\r\n\r\n\t\t\t},\r\n\r\n\t\t\t// Backwards Compatibility\r\n\r\n\t\t\tdomElement: container,\r\n\t\t\tsetMode: showPanel\r\n\r\n\t\t};\r\n\r\n\t};\r\n\r\n\tStats.Panel = function ( name, fg, bg ) {\r\n\r\n\t\tvar min = Infinity, max = 0, round = Math.round;\r\n\t\tvar PR = round( window.devicePixelRatio || 1 );\r\n\r\n\t\tvar WIDTH = 80 * PR, HEIGHT = 48 * PR,\r\n\t\t\t\tTEXT_X = 3 * PR, TEXT_Y = 2 * PR,\r\n\t\t\t\tGRAPH_X = 3 * PR, GRAPH_Y = 15 * PR,\r\n\t\t\t\tGRAPH_WIDTH = 74 * PR, GRAPH_HEIGHT = 30 * PR;\r\n\r\n\t\tvar canvas = document.createElement( 'canvas' );\r\n\t\tcanvas.width = WIDTH;\r\n\t\tcanvas.height = HEIGHT;\r\n\t\tcanvas.style.cssText = 'width:80px;height:48px';\r\n\r\n\t\tvar context = canvas.getContext( '2d' );\r\n\t\tcontext.font = 'bold ' + ( 9 * PR ) + 'px Helvetica,Arial,sans-serif';\r\n\t\tcontext.textBaseline = 'top';\r\n\r\n\t\tcontext.fillStyle = bg;\r\n\t\tcontext.fillRect( 0, 0, WIDTH, HEIGHT );\r\n\r\n\t\tcontext.fillStyle = fg;\r\n\t\tcontext.fillText( name, TEXT_X, TEXT_Y );\r\n\t\tcontext.fillRect( GRAPH_X, GRAPH_Y, GRAPH_WIDTH, GRAPH_HEIGHT );\r\n\r\n\t\tcontext.fillStyle = bg;\r\n\t\tcontext.globalAlpha = 0.9;\r\n\t\tcontext.fillRect( GRAPH_X, GRAPH_Y, GRAPH_WIDTH, GRAPH_HEIGHT );\r\n\r\n\t\treturn {\r\n\r\n\t\t\tdom: canvas,\r\n\r\n\t\t\tupdate: function ( value, maxValue ) {\r\n\r\n\t\t\t\tmin = Math.min( min, value );\r\n\t\t\t\tmax = Math.max( max, value );\r\n\r\n\t\t\t\tcontext.fillStyle = bg;\r\n\t\t\t\tcontext.globalAlpha = 1;\r\n\t\t\t\tcontext.fillRect( 0, 0, WIDTH, GRAPH_Y );\r\n\t\t\t\tcontext.fillStyle = fg;\r\n\t\t\t\tcontext.fillText( round( value ) + ' ' + name + ' (' + round( min ) + '-' + round( max ) + ')', TEXT_X, TEXT_Y );\r\n\r\n\t\t\t\tcontext.drawImage( canvas, GRAPH_X + PR, GRAPH_Y, GRAPH_WIDTH - PR, GRAPH_HEIGHT, GRAPH_X, GRAPH_Y, GRAPH_WIDTH - PR, GRAPH_HEIGHT );\r\n\r\n\t\t\t\tcontext.fillRect( GRAPH_X + GRAPH_WIDTH - PR, GRAPH_Y, PR, GRAPH_HEIGHT );\r\n\r\n\t\t\t\tcontext.fillStyle = bg;\r\n\t\t\t\tcontext.globalAlpha = 0.9;\r\n\t\t\t\tcontext.fillRect( GRAPH_X + GRAPH_WIDTH - PR, GRAPH_Y, PR, round( ( 1 - ( value / maxValue ) ) * GRAPH_HEIGHT ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t};\r\n\r\n\treturn  Stats;\r\n\r\n});\r\n\ndefine('skylark-threejs-ex/controls/OrbitControls',[\r\n    \"skylark-threejs\"\r\n], function (THREE) {\r\n    'use strict';\r\n    var OrbitControls = function (object, domElement) {\r\n        if (domElement === undefined)\r\n            console.warn('THREE.OrbitControls: The second parameter \"domElement\" is now mandatory.');\r\n        if (domElement === document)\r\n            console.error('THREE.OrbitControls: \"document\" should not be used as the target \"domElement\". Please use \"renderer.domElement\" instead.');\r\n        this.object = object;\r\n        this.domElement = domElement;\r\n        this.enabled = true;\r\n        this.target = new THREE.Vector3();\r\n        this.minDistance = 0;\r\n        this.maxDistance = Infinity;\r\n        this.minZoom = 0;\r\n        this.maxZoom = Infinity;\r\n        this.minPolarAngle = 0;\r\n        this.maxPolarAngle = Math.PI;\r\n        this.minAzimuthAngle = -Infinity;\r\n        this.maxAzimuthAngle = Infinity;\r\n        this.enableDamping = false;\r\n        this.dampingFactor = 0.05;\r\n        this.enableZoom = true;\r\n        this.zoomSpeed = 1;\r\n        this.enableRotate = true;\r\n        this.rotateSpeed = 1;\r\n        this.enablePan = true;\r\n        this.panSpeed = 1;\r\n        this.screenSpacePanning = false;\r\n        this.keyPanSpeed = 7;\r\n        this.autoRotate = false;\r\n        this.autoRotateSpeed = 2;\r\n        this.enableKeys = true;\r\n        this.keys = {\r\n            LEFT: 37,\r\n            UP: 38,\r\n            RIGHT: 39,\r\n            BOTTOM: 40\r\n        };\r\n        this.mouseButtons = {\r\n            LEFT: THREE.MOUSE.ROTATE,\r\n            MIDDLE: THREE.MOUSE.DOLLY,\r\n            RIGHT: THREE.MOUSE.PAN\r\n        };\r\n        this.touches = {\r\n            ONE: THREE.TOUCH.ROTATE,\r\n            TWO: THREE.TOUCH.DOLLY_PAN\r\n        };\r\n        this.target0 = this.target.clone();\r\n        this.position0 = this.object.position.clone();\r\n        this.zoom0 = this.object.zoom;\r\n        this.getPolarAngle = function () {\r\n            return spherical.phi;\r\n        };\r\n        this.getAzimuthalAngle = function () {\r\n            return spherical.theta;\r\n        };\r\n        this.saveState = function () {\r\n            scope.target0.copy(scope.target);\r\n            scope.position0.copy(scope.object.position);\r\n            scope.zoom0 = scope.object.zoom;\r\n        };\r\n        this.reset = function () {\r\n            scope.target.copy(scope.target0);\r\n            scope.object.position.copy(scope.position0);\r\n            scope.object.zoom = scope.zoom0;\r\n            scope.object.updateProjectionMatrix();\r\n            scope.dispatchEvent(changeEvent);\r\n            scope.update();\r\n            state = STATE.NONE;\r\n        };\r\n        this.update = function () {\r\n            var offset = new THREE.Vector3();\r\n            var quat = new THREE.Quaternion().setFromUnitVectors(object.up, new THREE.Vector3(0, 1, 0));\r\n            var quatInverse = quat.clone().inverse();\r\n            var lastPosition = new THREE.Vector3();\r\n            var lastQuaternion = new THREE.Quaternion();\r\n            return function update() {\r\n                var position = scope.object.position;\r\n                offset.copy(position).sub(scope.target);\r\n                offset.applyQuaternion(quat);\r\n                spherical.setFromVector3(offset);\r\n                if (scope.autoRotate && state === STATE.NONE) {\r\n                    rotateLeft(getAutoRotationAngle());\r\n                }\r\n                if (scope.enableDamping) {\r\n                    spherical.theta += sphericalDelta.theta * scope.dampingFactor;\r\n                    spherical.phi += sphericalDelta.phi * scope.dampingFactor;\r\n                } else {\r\n                    spherical.theta += sphericalDelta.theta;\r\n                    spherical.phi += sphericalDelta.phi;\r\n                }\r\n                spherical.theta = Math.max(scope.minAzimuthAngle, Math.min(scope.maxAzimuthAngle, spherical.theta));\r\n                spherical.phi = Math.max(scope.minPolarAngle, Math.min(scope.maxPolarAngle, spherical.phi));\r\n                spherical.makeSafe();\r\n                spherical.radius *= scale;\r\n                spherical.radius = Math.max(scope.minDistance, Math.min(scope.maxDistance, spherical.radius));\r\n                if (scope.enableDamping === true) {\r\n                    scope.target.addScaledVector(panOffset, scope.dampingFactor);\r\n                } else {\r\n                    scope.target.add(panOffset);\r\n                }\r\n                offset.setFromSpherical(spherical);\r\n                offset.applyQuaternion(quatInverse);\r\n                position.copy(scope.target).add(offset);\r\n                scope.object.lookAt(scope.target);\r\n                if (scope.enableDamping === true) {\r\n                    sphericalDelta.theta *= 1 - scope.dampingFactor;\r\n                    sphericalDelta.phi *= 1 - scope.dampingFactor;\r\n                    panOffset.multiplyScalar(1 - scope.dampingFactor);\r\n                } else {\r\n                    sphericalDelta.set(0, 0, 0);\r\n                    panOffset.set(0, 0, 0);\r\n                }\r\n                scale = 1;\r\n                if (zoomChanged || lastPosition.distanceToSquared(scope.object.position) > EPS || 8 * (1 - lastQuaternion.dot(scope.object.quaternion)) > EPS) {\r\n                    scope.dispatchEvent(changeEvent);\r\n                    lastPosition.copy(scope.object.position);\r\n                    lastQuaternion.copy(scope.object.quaternion);\r\n                    zoomChanged = false;\r\n                    return true;\r\n                }\r\n                return false;\r\n            };\r\n        }();\r\n        this.dispose = function () {\r\n            scope.domElement.removeEventListener('contextmenu', onContextMenu, false);\r\n            scope.domElement.removeEventListener('mousedown', onMouseDown, false);\r\n            scope.domElement.removeEventListener('wheel', onMouseWheel, false);\r\n            scope.domElement.removeEventListener('touchstart', onTouchStart, false);\r\n            scope.domElement.removeEventListener('touchend', onTouchEnd, false);\r\n            scope.domElement.removeEventListener('touchmove', onTouchMove, false);\r\n            document.removeEventListener('mousemove', onMouseMove, false);\r\n            document.removeEventListener('mouseup', onMouseUp, false);\r\n            scope.domElement.removeEventListener('keydown', onKeyDown, false);\r\n        };\r\n        var scope = this;\r\n        var changeEvent = { type: 'change' };\r\n        var startEvent = { type: 'start' };\r\n        var endEvent = { type: 'end' };\r\n        var STATE = {\r\n            NONE: -1,\r\n            ROTATE: 0,\r\n            DOLLY: 1,\r\n            PAN: 2,\r\n            TOUCH_ROTATE: 3,\r\n            TOUCH_PAN: 4,\r\n            TOUCH_DOLLY_PAN: 5,\r\n            TOUCH_DOLLY_ROTATE: 6\r\n        };\r\n        var state = STATE.NONE;\r\n        var EPS = 0.000001;\r\n        var spherical = new THREE.Spherical();\r\n        var sphericalDelta = new THREE.Spherical();\r\n        var scale = 1;\r\n        var panOffset = new THREE.Vector3();\r\n        var zoomChanged = false;\r\n        var rotateStart = new THREE.Vector2();\r\n        var rotateEnd = new THREE.Vector2();\r\n        var rotateDelta = new THREE.Vector2();\r\n        var panStart = new THREE.Vector2();\r\n        var panEnd = new THREE.Vector2();\r\n        var panDelta = new THREE.Vector2();\r\n        var dollyStart = new THREE.Vector2();\r\n        var dollyEnd = new THREE.Vector2();\r\n        var dollyDelta = new THREE.Vector2();\r\n        function getAutoRotationAngle() {\r\n            return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\r\n        }\r\n        function getZoomScale() {\r\n            return Math.pow(0.95, scope.zoomSpeed);\r\n        }\r\n        function rotateLeft(angle) {\r\n            sphericalDelta.theta -= angle;\r\n        }\r\n        function rotateUp(angle) {\r\n            sphericalDelta.phi -= angle;\r\n        }\r\n        var panLeft = function () {\r\n            var v = new THREE.Vector3();\r\n            return function panLeft(distance, objectMatrix) {\r\n                v.setFromMatrixColumn(objectMatrix, 0);\r\n                v.multiplyScalar(-distance);\r\n                panOffset.add(v);\r\n            };\r\n        }();\r\n        var panUp = function () {\r\n            var v = new THREE.Vector3();\r\n            return function panUp(distance, objectMatrix) {\r\n                if (scope.screenSpacePanning === true) {\r\n                    v.setFromMatrixColumn(objectMatrix, 1);\r\n                } else {\r\n                    v.setFromMatrixColumn(objectMatrix, 0);\r\n                    v.crossVectors(scope.object.up, v);\r\n                }\r\n                v.multiplyScalar(distance);\r\n                panOffset.add(v);\r\n            };\r\n        }();\r\n        var pan = function () {\r\n            var offset = new THREE.Vector3();\r\n            return function pan(deltaX, deltaY) {\r\n                var element = scope.domElement;\r\n                if (scope.object.isPerspectiveCamera) {\r\n                    var position = scope.object.position;\r\n                    offset.copy(position).sub(scope.target);\r\n                    var targetDistance = offset.length();\r\n                    targetDistance *= Math.tan(scope.object.fov / 2 * Math.PI / 180);\r\n                    panLeft(2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix);\r\n                    panUp(2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix);\r\n                } else if (scope.object.isOrthographicCamera) {\r\n                    panLeft(deltaX * (scope.object.right - scope.object.left) / scope.object.zoom / element.clientWidth, scope.object.matrix);\r\n                    panUp(deltaY * (scope.object.top - scope.object.bottom) / scope.object.zoom / element.clientHeight, scope.object.matrix);\r\n                } else {\r\n                    console.warn('WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.');\r\n                    scope.enablePan = false;\r\n                }\r\n            };\r\n        }();\r\n        function dollyOut(dollyScale) {\r\n            if (scope.object.isPerspectiveCamera) {\r\n                scale /= dollyScale;\r\n            } else if (scope.object.isOrthographicCamera) {\r\n                scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom * dollyScale));\r\n                scope.object.updateProjectionMatrix();\r\n                zoomChanged = true;\r\n            } else {\r\n                console.warn('WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.');\r\n                scope.enableZoom = false;\r\n            }\r\n        }\r\n        function dollyIn(dollyScale) {\r\n            if (scope.object.isPerspectiveCamera) {\r\n                scale *= dollyScale;\r\n            } else if (scope.object.isOrthographicCamera) {\r\n                scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom / dollyScale));\r\n                scope.object.updateProjectionMatrix();\r\n                zoomChanged = true;\r\n            } else {\r\n                console.warn('WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.');\r\n                scope.enableZoom = false;\r\n            }\r\n        }\r\n        function handleMouseDownRotate(event) {\r\n            rotateStart.set(event.clientX, event.clientY);\r\n        }\r\n        function handleMouseDownDolly(event) {\r\n            dollyStart.set(event.clientX, event.clientY);\r\n        }\r\n        function handleMouseDownPan(event) {\r\n            panStart.set(event.clientX, event.clientY);\r\n        }\r\n        function handleMouseMoveRotate(event) {\r\n            rotateEnd.set(event.clientX, event.clientY);\r\n            rotateDelta.subVectors(rotateEnd, rotateStart).multiplyScalar(scope.rotateSpeed);\r\n            var element = scope.domElement;\r\n            rotateLeft(2 * Math.PI * rotateDelta.x / element.clientHeight);\r\n            rotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight);\r\n            rotateStart.copy(rotateEnd);\r\n            scope.update();\r\n        }\r\n        function handleMouseMoveDolly(event) {\r\n            dollyEnd.set(event.clientX, event.clientY);\r\n            dollyDelta.subVectors(dollyEnd, dollyStart);\r\n            if (dollyDelta.y > 0) {\r\n                dollyOut(getZoomScale());\r\n            } else if (dollyDelta.y < 0) {\r\n                dollyIn(getZoomScale());\r\n            }\r\n            dollyStart.copy(dollyEnd);\r\n            scope.update();\r\n        }\r\n        function handleMouseMovePan(event) {\r\n            panEnd.set(event.clientX, event.clientY);\r\n            panDelta.subVectors(panEnd, panStart).multiplyScalar(scope.panSpeed);\r\n            pan(panDelta.x, panDelta.y);\r\n            panStart.copy(panEnd);\r\n            scope.update();\r\n        }\r\n        function handleMouseUp() {\r\n        }\r\n        function handleMouseWheel(event) {\r\n            if (event.deltaY < 0) {\r\n                dollyIn(getZoomScale());\r\n            } else if (event.deltaY > 0) {\r\n                dollyOut(getZoomScale());\r\n            }\r\n            scope.update();\r\n        }\r\n        function handleKeyDown(event) {\r\n            var needsUpdate = false;\r\n            switch (event.keyCode) {\r\n            case scope.keys.UP:\r\n                pan(0, scope.keyPanSpeed);\r\n                needsUpdate = true;\r\n                break;\r\n            case scope.keys.BOTTOM:\r\n                pan(0, -scope.keyPanSpeed);\r\n                needsUpdate = true;\r\n                break;\r\n            case scope.keys.LEFT:\r\n                pan(scope.keyPanSpeed, 0);\r\n                needsUpdate = true;\r\n                break;\r\n            case scope.keys.RIGHT:\r\n                pan(-scope.keyPanSpeed, 0);\r\n                needsUpdate = true;\r\n                break;\r\n            }\r\n            if (needsUpdate) {\r\n                event.preventDefault();\r\n                scope.update();\r\n            }\r\n        }\r\n        function handleTouchStartRotate(event) {\r\n            if (event.touches.length == 1) {\r\n                rotateStart.set(event.touches[0].pageX, event.touches[0].pageY);\r\n            } else {\r\n                var x = 0.5 * (event.touches[0].pageX + event.touches[1].pageX);\r\n                var y = 0.5 * (event.touches[0].pageY + event.touches[1].pageY);\r\n                rotateStart.set(x, y);\r\n            }\r\n        }\r\n        function handleTouchStartPan(event) {\r\n            if (event.touches.length == 1) {\r\n                panStart.set(event.touches[0].pageX, event.touches[0].pageY);\r\n            } else {\r\n                var x = 0.5 * (event.touches[0].pageX + event.touches[1].pageX);\r\n                var y = 0.5 * (event.touches[0].pageY + event.touches[1].pageY);\r\n                panStart.set(x, y);\r\n            }\r\n        }\r\n        function handleTouchStartDolly(event) {\r\n            var dx = event.touches[0].pageX - event.touches[1].pageX;\r\n            var dy = event.touches[0].pageY - event.touches[1].pageY;\r\n            var distance = Math.sqrt(dx * dx + dy * dy);\r\n            dollyStart.set(0, distance);\r\n        }\r\n        function handleTouchStartDollyPan(event) {\r\n            if (scope.enableZoom)\r\n                handleTouchStartDolly(event);\r\n            if (scope.enablePan)\r\n                handleTouchStartPan(event);\r\n        }\r\n        function handleTouchStartDollyRotate(event) {\r\n            if (scope.enableZoom)\r\n                handleTouchStartDolly(event);\r\n            if (scope.enableRotate)\r\n                handleTouchStartRotate(event);\r\n        }\r\n        function handleTouchMoveRotate(event) {\r\n            if (event.touches.length == 1) {\r\n                rotateEnd.set(event.touches[0].pageX, event.touches[0].pageY);\r\n            } else {\r\n                var x = 0.5 * (event.touches[0].pageX + event.touches[1].pageX);\r\n                var y = 0.5 * (event.touches[0].pageY + event.touches[1].pageY);\r\n                rotateEnd.set(x, y);\r\n            }\r\n            rotateDelta.subVectors(rotateEnd, rotateStart).multiplyScalar(scope.rotateSpeed);\r\n            var element = scope.domElement;\r\n            rotateLeft(2 * Math.PI * rotateDelta.x / element.clientHeight);\r\n            rotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight);\r\n            rotateStart.copy(rotateEnd);\r\n        }\r\n        function handleTouchMovePan(event) {\r\n            if (event.touches.length == 1) {\r\n                panEnd.set(event.touches[0].pageX, event.touches[0].pageY);\r\n            } else {\r\n                var x = 0.5 * (event.touches[0].pageX + event.touches[1].pageX);\r\n                var y = 0.5 * (event.touches[0].pageY + event.touches[1].pageY);\r\n                panEnd.set(x, y);\r\n            }\r\n            panDelta.subVectors(panEnd, panStart).multiplyScalar(scope.panSpeed);\r\n            pan(panDelta.x, panDelta.y);\r\n            panStart.copy(panEnd);\r\n        }\r\n        function handleTouchMoveDolly(event) {\r\n            var dx = event.touches[0].pageX - event.touches[1].pageX;\r\n            var dy = event.touches[0].pageY - event.touches[1].pageY;\r\n            var distance = Math.sqrt(dx * dx + dy * dy);\r\n            dollyEnd.set(0, distance);\r\n            dollyDelta.set(0, Math.pow(dollyEnd.y / dollyStart.y, scope.zoomSpeed));\r\n            dollyOut(dollyDelta.y);\r\n            dollyStart.copy(dollyEnd);\r\n        }\r\n        function handleTouchMoveDollyPan(event) {\r\n            if (scope.enableZoom)\r\n                handleTouchMoveDolly(event);\r\n            if (scope.enablePan)\r\n                handleTouchMovePan(event);\r\n        }\r\n        function handleTouchMoveDollyRotate(event) {\r\n            if (scope.enableZoom)\r\n                handleTouchMoveDolly(event);\r\n            if (scope.enableRotate)\r\n                handleTouchMoveRotate(event);\r\n        }\r\n        function handleTouchEnd() {\r\n        }\r\n        function onMouseDown(event) {\r\n            if (scope.enabled === false)\r\n                return;\r\n            event.preventDefault();\r\n            scope.domElement.focus ? scope.domElement.focus() : window.focus();\r\n            var mouseAction;\r\n            switch (event.button) {\r\n            case 0:\r\n                mouseAction = scope.mouseButtons.LEFT;\r\n                break;\r\n            case 1:\r\n                mouseAction = scope.mouseButtons.MIDDLE;\r\n                break;\r\n            case 2:\r\n                mouseAction = scope.mouseButtons.RIGHT;\r\n                break;\r\n            default:\r\n                mouseAction = -1;\r\n            }\r\n            switch (mouseAction) {\r\n            case THREE.MOUSE.DOLLY:\r\n                if (scope.enableZoom === false)\r\n                    return;\r\n                handleMouseDownDolly(event);\r\n                state = STATE.DOLLY;\r\n                break;\r\n            case THREE.MOUSE.ROTATE:\r\n                if (event.ctrlKey || event.metaKey || event.shiftKey) {\r\n                    if (scope.enablePan === false)\r\n                        return;\r\n                    handleMouseDownPan(event);\r\n                    state = STATE.PAN;\r\n                } else {\r\n                    if (scope.enableRotate === false)\r\n                        return;\r\n                    handleMouseDownRotate(event);\r\n                    state = STATE.ROTATE;\r\n                }\r\n                break;\r\n            case THREE.MOUSE.PAN:\r\n                if (event.ctrlKey || event.metaKey || event.shiftKey) {\r\n                    if (scope.enableRotate === false)\r\n                        return;\r\n                    handleMouseDownRotate(event);\r\n                    state = STATE.ROTATE;\r\n                } else {\r\n                    if (scope.enablePan === false)\r\n                        return;\r\n                    handleMouseDownPan(event);\r\n                    state = STATE.PAN;\r\n                }\r\n                break;\r\n            default:\r\n                state = STATE.NONE;\r\n            }\r\n            if (state !== STATE.NONE) {\r\n                document.addEventListener('mousemove', onMouseMove, false);\r\n                document.addEventListener('mouseup', onMouseUp, false);\r\n                scope.dispatchEvent(startEvent);\r\n            }\r\n        }\r\n        function onMouseMove(event) {\r\n            if (scope.enabled === false)\r\n                return;\r\n            event.preventDefault();\r\n            switch (state) {\r\n            case STATE.ROTATE:\r\n                if (scope.enableRotate === false)\r\n                    return;\r\n                handleMouseMoveRotate(event);\r\n                break;\r\n            case STATE.DOLLY:\r\n                if (scope.enableZoom === false)\r\n                    return;\r\n                handleMouseMoveDolly(event);\r\n                break;\r\n            case STATE.PAN:\r\n                if (scope.enablePan === false)\r\n                    return;\r\n                handleMouseMovePan(event);\r\n                break;\r\n            }\r\n        }\r\n        function onMouseUp(event) {\r\n            if (scope.enabled === false)\r\n                return;\r\n            handleMouseUp(event);\r\n            document.removeEventListener('mousemove', onMouseMove, false);\r\n            document.removeEventListener('mouseup', onMouseUp, false);\r\n            scope.dispatchEvent(endEvent);\r\n            state = STATE.NONE;\r\n        }\r\n        function onMouseWheel(event) {\r\n            if (scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE && state !== STATE.ROTATE)\r\n                return;\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            scope.dispatchEvent(startEvent);\r\n            handleMouseWheel(event);\r\n            scope.dispatchEvent(endEvent);\r\n        }\r\n        function onKeyDown(event) {\r\n            if (scope.enabled === false || scope.enableKeys === false || scope.enablePan === false)\r\n                return;\r\n            handleKeyDown(event);\r\n        }\r\n        function onTouchStart(event) {\r\n            if (scope.enabled === false)\r\n                return;\r\n            event.preventDefault();\r\n            switch (event.touches.length) {\r\n            case 1:\r\n                switch (scope.touches.ONE) {\r\n                case THREE.TOUCH.ROTATE:\r\n                    if (scope.enableRotate === false)\r\n                        return;\r\n                    handleTouchStartRotate(event);\r\n                    state = STATE.TOUCH_ROTATE;\r\n                    break;\r\n                case THREE.TOUCH.PAN:\r\n                    if (scope.enablePan === false)\r\n                        return;\r\n                    handleTouchStartPan(event);\r\n                    state = STATE.TOUCH_PAN;\r\n                    break;\r\n                default:\r\n                    state = STATE.NONE;\r\n                }\r\n                break;\r\n            case 2:\r\n                switch (scope.touches.TWO) {\r\n                case THREE.TOUCH.DOLLY_PAN:\r\n                    if (scope.enableZoom === false && scope.enablePan === false)\r\n                        return;\r\n                    handleTouchStartDollyPan(event);\r\n                    state = STATE.TOUCH_DOLLY_PAN;\r\n                    break;\r\n                case THREE.TOUCH.DOLLY_ROTATE:\r\n                    if (scope.enableZoom === false && scope.enableRotate === false)\r\n                        return;\r\n                    handleTouchStartDollyRotate(event);\r\n                    state = STATE.TOUCH_DOLLY_ROTATE;\r\n                    break;\r\n                default:\r\n                    state = STATE.NONE;\r\n                }\r\n                break;\r\n            default:\r\n                state = STATE.NONE;\r\n            }\r\n            if (state !== STATE.NONE) {\r\n                scope.dispatchEvent(startEvent);\r\n            }\r\n        }\r\n        function onTouchMove(event) {\r\n            if (scope.enabled === false)\r\n                return;\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            switch (state) {\r\n            case STATE.TOUCH_ROTATE:\r\n                if (scope.enableRotate === false)\r\n                    return;\r\n                handleTouchMoveRotate(event);\r\n                scope.update();\r\n                break;\r\n            case STATE.TOUCH_PAN:\r\n                if (scope.enablePan === false)\r\n                    return;\r\n                handleTouchMovePan(event);\r\n                scope.update();\r\n                break;\r\n            case STATE.TOUCH_DOLLY_PAN:\r\n                if (scope.enableZoom === false && scope.enablePan === false)\r\n                    return;\r\n                handleTouchMoveDollyPan(event);\r\n                scope.update();\r\n                break;\r\n            case STATE.TOUCH_DOLLY_ROTATE:\r\n                if (scope.enableZoom === false && scope.enableRotate === false)\r\n                    return;\r\n                handleTouchMoveDollyRotate(event);\r\n                scope.update();\r\n                break;\r\n            default:\r\n                state = STATE.NONE;\r\n            }\r\n        }\r\n        function onTouchEnd(event) {\r\n            if (scope.enabled === false)\r\n                return;\r\n            handleTouchEnd(event);\r\n            scope.dispatchEvent(endEvent);\r\n            state = STATE.NONE;\r\n        }\r\n        function onContextMenu(event) {\r\n            if (scope.enabled === false)\r\n                return;\r\n            event.preventDefault();\r\n        }\r\n        scope.domElement.addEventListener('contextmenu', onContextMenu, false);\r\n        scope.domElement.addEventListener('mousedown', onMouseDown, false);\r\n        scope.domElement.addEventListener('wheel', onMouseWheel, false);\r\n        scope.domElement.addEventListener('touchstart', onTouchStart, false);\r\n        scope.domElement.addEventListener('touchend', onTouchEnd, false);\r\n        scope.domElement.addEventListener('touchmove', onTouchMove, false);\r\n        scope.domElement.addEventListener('keydown', onKeyDown, false);\r\n        if (scope.domElement.tabIndex === -1) {\r\n            scope.domElement.tabIndex = 0;\r\n        }\r\n        this.update();\r\n    };\r\n    OrbitControls.prototype = Object.create(THREE.EventDispatcher.prototype);\r\n    OrbitControls.prototype.constructor = OrbitControls;\r\n\r\n    \r\n    return     OrbitControls;\r\n});\ndefine('skylark-threejs-ex/loaders/RGBELoader',[\r\n    \"skylark-threejs\"\r\n], function (THREE) {\r\n    'use strict';\r\n    var RGBELoader = function (manager) {\r\n        THREE.DataTextureLoader.call(this, manager);\r\n        this.type = THREE.UnsignedByteType;\r\n    };\r\n    RGBELoader.prototype = Object.assign(Object.create(THREE.DataTextureLoader.prototype), {\r\n        constructor: RGBELoader,\r\n        parse: function (buffer) {\r\n            var RGBE_RETURN_FAILURE = -1, rgbe_read_error = 1, rgbe_write_error = 2, rgbe_format_error = 3, rgbe_memory_error = 4, rgbe_error = function (rgbe_error_code, msg) {\r\n                    switch (rgbe_error_code) {\r\n                    case rgbe_read_error:\r\n                        console.error('RGBELoader Read Error: ' + (msg || ''));\r\n                        break;\r\n                    case rgbe_write_error:\r\n                        console.error('RGBELoader Write Error: ' + (msg || ''));\r\n                        break;\r\n                    case rgbe_format_error:\r\n                        console.error('RGBELoader Bad File Format: ' + (msg || ''));\r\n                        break;\r\n                    default:\r\n                    case rgbe_memory_error:\r\n                        console.error('RGBELoader: Error: ' + (msg || ''));\r\n                    }\r\n                    return RGBE_RETURN_FAILURE;\r\n                }, RGBE_VALID_PROGRAMTYPE = 1, RGBE_VALID_FORMAT = 2, RGBE_VALID_DIMENSIONS = 4, NEWLINE = '\\n', fgets = function (buffer, lineLimit, consume) {\r\n                    lineLimit = !lineLimit ? 1024 : lineLimit;\r\n                    var p = buffer.pos, i = -1, len = 0, s = '', chunkSize = 128, chunk = String.fromCharCode.apply(null, new Uint16Array(buffer.subarray(p, p + chunkSize)));\r\n                    while (0 > (i = chunk.indexOf(NEWLINE)) && len < lineLimit && p < buffer.byteLength) {\r\n                        s += chunk;\r\n                        len += chunk.length;\r\n                        p += chunkSize;\r\n                        chunk += String.fromCharCode.apply(null, new Uint16Array(buffer.subarray(p, p + chunkSize)));\r\n                    }\r\n                    if (-1 < i) {\r\n                        if (false !== consume)\r\n                            buffer.pos += len + i + 1;\r\n                        return s + chunk.slice(0, i);\r\n                    }\r\n                    return false;\r\n                }, RGBE_ReadHeader = function (buffer) {\r\n                    var line, match, magic_token_re = /^#\\?(\\S+)$/, gamma_re = /^\\s*GAMMA\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/, exposure_re = /^\\s*EXPOSURE\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/, format_re = /^\\s*FORMAT=(\\S+)\\s*$/, dimensions_re = /^\\s*\\-Y\\s+(\\d+)\\s+\\+X\\s+(\\d+)\\s*$/, header = {\r\n                            valid: 0,\r\n                            string: '',\r\n                            comments: '',\r\n                            programtype: 'RGBE',\r\n                            format: '',\r\n                            gamma: 1,\r\n                            exposure: 1,\r\n                            width: 0,\r\n                            height: 0\r\n                        };\r\n                    if (buffer.pos >= buffer.byteLength || !(line = fgets(buffer))) {\r\n                        return rgbe_error(rgbe_read_error, 'no header found');\r\n                    }\r\n                    if (!(match = line.match(magic_token_re))) {\r\n                        return rgbe_error(rgbe_format_error, 'bad initial token');\r\n                    }\r\n                    header.valid |= RGBE_VALID_PROGRAMTYPE;\r\n                    header.programtype = match[1];\r\n                    header.string += line + '\\n';\r\n                    while (true) {\r\n                        line = fgets(buffer);\r\n                        if (false === line)\r\n                            break;\r\n                        header.string += line + '\\n';\r\n                        if ('#' === line.charAt(0)) {\r\n                            header.comments += line + '\\n';\r\n                            continue;\r\n                        }\r\n                        if (match = line.match(gamma_re)) {\r\n                            header.gamma = parseFloat(match[1], 10);\r\n                        }\r\n                        if (match = line.match(exposure_re)) {\r\n                            header.exposure = parseFloat(match[1], 10);\r\n                        }\r\n                        if (match = line.match(format_re)) {\r\n                            header.valid |= RGBE_VALID_FORMAT;\r\n                            header.format = match[1];\r\n                        }\r\n                        if (match = line.match(dimensions_re)) {\r\n                            header.valid |= RGBE_VALID_DIMENSIONS;\r\n                            header.height = parseInt(match[1], 10);\r\n                            header.width = parseInt(match[2], 10);\r\n                        }\r\n                        if (header.valid & RGBE_VALID_FORMAT && header.valid & RGBE_VALID_DIMENSIONS)\r\n                            break;\r\n                    }\r\n                    if (!(header.valid & RGBE_VALID_FORMAT)) {\r\n                        return rgbe_error(rgbe_format_error, 'missing format specifier');\r\n                    }\r\n                    if (!(header.valid & RGBE_VALID_DIMENSIONS)) {\r\n                        return rgbe_error(rgbe_format_error, 'missing image size specifier');\r\n                    }\r\n                    return header;\r\n                }, RGBE_ReadPixels_RLE = function (buffer, w, h) {\r\n                    var data_rgba, offset, pos, count, byteValue, scanline_buffer, ptr, ptr_end, i, l, off, isEncodedRun, scanline_width = w, num_scanlines = h, rgbeStart;\r\n                    if (scanline_width < 8 || scanline_width > 32767 || (2 !== buffer[0] || 2 !== buffer[1] || buffer[2] & 128)) {\r\n                        return new Uint8Array(buffer);\r\n                    }\r\n                    if (scanline_width !== (buffer[2] << 8 | buffer[3])) {\r\n                        return rgbe_error(rgbe_format_error, 'wrong scanline width');\r\n                    }\r\n                    data_rgba = new Uint8Array(4 * w * h);\r\n                    if (!data_rgba || !data_rgba.length) {\r\n                        return rgbe_error(rgbe_memory_error, 'unable to allocate buffer space');\r\n                    }\r\n                    offset = 0;\r\n                    pos = 0;\r\n                    ptr_end = 4 * scanline_width;\r\n                    rgbeStart = new Uint8Array(4);\r\n                    scanline_buffer = new Uint8Array(ptr_end);\r\n                    while (num_scanlines > 0 && pos < buffer.byteLength) {\r\n                        if (pos + 4 > buffer.byteLength) {\r\n                            return rgbe_error(rgbe_read_error);\r\n                        }\r\n                        rgbeStart[0] = buffer[pos++];\r\n                        rgbeStart[1] = buffer[pos++];\r\n                        rgbeStart[2] = buffer[pos++];\r\n                        rgbeStart[3] = buffer[pos++];\r\n                        if (2 != rgbeStart[0] || 2 != rgbeStart[1] || (rgbeStart[2] << 8 | rgbeStart[3]) != scanline_width) {\r\n                            return rgbe_error(rgbe_format_error, 'bad rgbe scanline format');\r\n                        }\r\n                        ptr = 0;\r\n                        while (ptr < ptr_end && pos < buffer.byteLength) {\r\n                            count = buffer[pos++];\r\n                            isEncodedRun = count > 128;\r\n                            if (isEncodedRun)\r\n                                count -= 128;\r\n                            if (0 === count || ptr + count > ptr_end) {\r\n                                return rgbe_error(rgbe_format_error, 'bad scanline data');\r\n                            }\r\n                            if (isEncodedRun) {\r\n                                byteValue = buffer[pos++];\r\n                                for (i = 0; i < count; i++) {\r\n                                    scanline_buffer[ptr++] = byteValue;\r\n                                }\r\n                            } else {\r\n                                scanline_buffer.set(buffer.subarray(pos, pos + count), ptr);\r\n                                ptr += count;\r\n                                pos += count;\r\n                            }\r\n                        }\r\n                        l = scanline_width;\r\n                        for (i = 0; i < l; i++) {\r\n                            off = 0;\r\n                            data_rgba[offset] = scanline_buffer[i + off];\r\n                            off += scanline_width;\r\n                            data_rgba[offset + 1] = scanline_buffer[i + off];\r\n                            off += scanline_width;\r\n                            data_rgba[offset + 2] = scanline_buffer[i + off];\r\n                            off += scanline_width;\r\n                            data_rgba[offset + 3] = scanline_buffer[i + off];\r\n                            offset += 4;\r\n                        }\r\n                        num_scanlines--;\r\n                    }\r\n                    return data_rgba;\r\n                };\r\n            var RGBEByteToRGBFloat = function (sourceArray, sourceOffset, destArray, destOffset) {\r\n                var e = sourceArray[sourceOffset + 3];\r\n                var scale = Math.pow(2, e - 128) / 255;\r\n                destArray[destOffset + 0] = sourceArray[sourceOffset + 0] * scale;\r\n                destArray[destOffset + 1] = sourceArray[sourceOffset + 1] * scale;\r\n                destArray[destOffset + 2] = sourceArray[sourceOffset + 2] * scale;\r\n            };\r\n            var RGBEByteToRGBHalf = function () {\r\n                var floatView = new Float32Array(1);\r\n                var int32View = new Int32Array(floatView.buffer);\r\n                function toHalf(val) {\r\n                    floatView[0] = val;\r\n                    var x = int32View[0];\r\n                    var bits = x >> 16 & 32768;\r\n                    var m = x >> 12 & 2047;\r\n                    var e = x >> 23 & 255;\r\n                    if (e < 103)\r\n                        return bits;\r\n                    if (e > 142) {\r\n                        bits |= 31744;\r\n                        bits |= (e == 255 ? 0 : 1) && x & 8388607;\r\n                        return bits;\r\n                    }\r\n                    if (e < 113) {\r\n                        m |= 2048;\r\n                        bits |= (m >> 114 - e) + (m >> 113 - e & 1);\r\n                        return bits;\r\n                    }\r\n                    bits |= e - 112 << 10 | m >> 1;\r\n                    bits += m & 1;\r\n                    return bits;\r\n                }\r\n                return function (sourceArray, sourceOffset, destArray, destOffset) {\r\n                    var e = sourceArray[sourceOffset + 3];\r\n                    var scale = Math.pow(2, e - 128) / 255;\r\n                    destArray[destOffset + 0] = toHalf(sourceArray[sourceOffset + 0] * scale);\r\n                    destArray[destOffset + 1] = toHalf(sourceArray[sourceOffset + 1] * scale);\r\n                    destArray[destOffset + 2] = toHalf(sourceArray[sourceOffset + 2] * scale);\r\n                };\r\n            }();\r\n            var byteArray = new Uint8Array(buffer);\r\n            byteArray.pos = 0;\r\n            var rgbe_header_info = RGBE_ReadHeader(byteArray);\r\n            if (RGBE_RETURN_FAILURE !== rgbe_header_info) {\r\n                var w = rgbe_header_info.width, h = rgbe_header_info.height, image_rgba_data = RGBE_ReadPixels_RLE(byteArray.subarray(byteArray.pos), w, h);\r\n                if (RGBE_RETURN_FAILURE !== image_rgba_data) {\r\n                    switch (this.type) {\r\n                    case THREE.UnsignedByteType:\r\n                        var data = image_rgba_data;\r\n                        var format = THREE.RGBEFormat;\r\n                        var type = THREE.UnsignedByteType;\r\n                        break;\r\n                    case THREE.FloatType:\r\n                        var numElements = image_rgba_data.length / 4 * 3;\r\n                        var floatArray = new Float32Array(numElements);\r\n                        for (var j = 0; j < numElements; j++) {\r\n                            RGBEByteToRGBFloat(image_rgba_data, j * 4, floatArray, j * 3);\r\n                        }\r\n                        var data = floatArray;\r\n                        var format = THREE.RGBFormat;\r\n                        var type = THREE.FloatType;\r\n                        break;\r\n                    case THREE.HalfFloatType:\r\n                        var numElements = image_rgba_data.length / 4 * 3;\r\n                        var halfArray = new Uint16Array(numElements);\r\n                        for (var j = 0; j < numElements; j++) {\r\n                            RGBEByteToRGBHalf(image_rgba_data, j * 4, halfArray, j * 3);\r\n                        }\r\n                        var data = halfArray;\r\n                        var format = THREE.RGBFormat;\r\n                        var type = THREE.HalfFloatType;\r\n                        break;\r\n                    default:\r\n                        console.error('THREE.RGBELoader: unsupported type: ', this.type);\r\n                        break;\r\n                    }\r\n                    return {\r\n                        width: w,\r\n                        height: h,\r\n                        data: data,\r\n                        header: rgbe_header_info.string,\r\n                        gamma: rgbe_header_info.gamma,\r\n                        exposure: rgbe_header_info.exposure,\r\n                        format: format,\r\n                        type: type\r\n                    };\r\n                }\r\n            }\r\n            return null;\r\n        },\r\n        setDataType: function (value) {\r\n            this.type = value;\r\n            return this;\r\n        },\r\n        load: function (url, onLoad, onProgress, onError) {\r\n            function onLoadCallback(texture, texData) {\r\n                switch (texture.type) {\r\n                case THREE.UnsignedByteType:\r\n                    texture.encoding = THREE.RGBEEncoding;\r\n                    texture.minFilter = THREE.NearestFilter;\r\n                    texture.magFilter = THREE.NearestFilter;\r\n                    texture.generateMipmaps = false;\r\n                    texture.flipY = true;\r\n                    break;\r\n                case THREE.FloatType:\r\n                    texture.encoding = THREE.LinearEncoding;\r\n                    texture.minFilter = THREE.LinearFilter;\r\n                    texture.magFilter = THREE.LinearFilter;\r\n                    texture.generateMipmaps = false;\r\n                    texture.flipY = true;\r\n                    break;\r\n                case THREE.HalfFloatType:\r\n                    texture.encoding = THREE.LinearEncoding;\r\n                    texture.minFilter = THREE.LinearFilter;\r\n                    texture.magFilter = THREE.LinearFilter;\r\n                    texture.generateMipmaps = false;\r\n                    texture.flipY = true;\r\n                    break;\r\n                }\r\n                if (onLoad)\r\n                    onLoad(texture, texData);\r\n            }\r\n            return THREE.DataTextureLoader.prototype.load.call(this, url, onLoadCallback, onProgress, onError);\r\n        }\r\n    });\r\n    return RGBELoader;\r\n});\ndefine('skylark-threegltfviewer/environments',[\r\n  \"./threegltviewer\"\r\n],function(threegltviewer){\r\n  const environments = [\r\n    {\r\n      id: '',\r\n      name: 'None',\r\n      path: null,\r\n      format: '.hdr'\r\n    },\r\n    {\r\n      id: 'venice-sunset',\r\n      name: 'Venice Sunset',\r\n      path: 'assets/environment/venice_sunset_1k.hdr',\r\n      format: '.hdr'\r\n    },\r\n    {\r\n      id: 'footprint-court',\r\n      name: 'Footprint Court (HDR Labs)',\r\n      path: 'assets/environment/footprint_court_2k.hdr',\r\n      format: '.hdr'\r\n    }\r\n  ];\r\n\r\n  return threegltviewer.environments = environments;\r\n});\r\n\r\n\ndefine('skylark-threegltfviewer/vignettes',[\r\n    'skylark-threejs',\r\n    \"./threegltviewer\"\r\n], function (THREE,threegltviewer) {\r\n    'use strict';\r\n    const vert = [\r\n                'attribute vec3 position;',\r\n                'uniform mat4 modelViewMatrix;',\r\n                'uniform mat4 projectionMatrix;',\r\n                'varying vec2 vUv;',\r\n                'void main() {',\r\n                '\\tgl_Position = vec4(position, 1.0);',\r\n                '\\tvUv = vec2(position.x, position.y) * 0.5 + 0.5;',\r\n                '}'\r\n                ].join('\\n'),\r\n          frag = [\r\n                'precision mediump float;',\r\n                '#pragma glslify: grain = require(\\'glsl-film-grain\\')',\r\n                '#pragma glslify: blend = require(\\'glsl-blend-soft-light\\')',\r\n                '',\r\n                'uniform vec3 color1;',\r\n                'uniform vec3 color2;',\r\n                'uniform float aspect;',\r\n                'uniform vec2 offset;',\r\n                'uniform vec2 scale;',\r\n                'uniform float noiseAlpha;',\r\n                'uniform bool aspectCorrection;',\r\n                'uniform float grainScale;',\r\n                'uniform float grainTime;',\r\n                'uniform vec2 smooth;',\r\n                '',\r\n                'varying vec2 vUv;',\r\n                '',\r\n                'void main() {',\r\n                '\\tvec2 q = vec2(vUv - 0.5);',\r\n                '\\tif (aspectCorrection) {',\r\n                '\\t\\tq.x *= aspect;',\r\n                '\\t}',\r\n                '\\tq /= scale;',\r\n                '\\tq -= offset;',\r\n                '\\tfloat dst = length(q);',\r\n                '\\tdst = smoothstep(smooth.x, smooth.y, dst);',\r\n                '\\tvec3 color = mix(color1, color2, dst);',\r\n                '',\r\n                '\\tif (noiseAlpha > 0.0 && grainScale > 0.0) {',\r\n                '\\t\\tfloat gSize = 1.0 / grainScale;',\r\n                '\\t\\tfloat g = grain(vUv, vec2(gSize * aspect, gSize), grainTime);',\r\n                '\\t\\tvec3 noiseColor = blend(color, vec3(g));',\r\n                '\\t\\tgl_FragColor.rgb = mix(color, noiseColor, noiseAlpha);',\r\n                '\\t} else {',\r\n                '\\t\\tgl_FragColor.rgb = color;',\r\n                '\\t}',\r\n                '\\tgl_FragColor.a = 1.0;',\r\n                '}'\r\n                ].join('\\n');\r\n\r\n    function createBackground(opt) {\r\n        opt = opt || {};\r\n        var geometry = opt.geometry || new THREE.PlaneGeometry(2, 2, 1);\r\n        var material = new THREE.RawShaderMaterial({\r\n            vertexShader: vert,\r\n            fragmentShader: frag,\r\n            side: THREE.DoubleSide,\r\n            uniforms: {\r\n                aspectCorrection: {\r\n                    type: 'i',\r\n                    value: false\r\n                },\r\n                aspect: {\r\n                    type: 'f',\r\n                    value: 1\r\n                },\r\n                grainScale: {\r\n                    type: 'f',\r\n                    value: 0.005\r\n                },\r\n                grainTime: {\r\n                    type: 'f',\r\n                    value: 0\r\n                },\r\n                noiseAlpha: {\r\n                    type: 'f',\r\n                    value: 0.25\r\n                },\r\n                offset: {\r\n                    type: 'v2',\r\n                    value: new THREE.Vector2(0, 0)\r\n                },\r\n                scale: {\r\n                    type: 'v2',\r\n                    value: new THREE.Vector2(1, 1)\r\n                },\r\n                smooth: {\r\n                    type: 'v2',\r\n                    value: new THREE.Vector2(0, 1)\r\n                },\r\n                color1: {\r\n                    type: 'c',\r\n                    value: new THREE.Color('#fff')\r\n                },\r\n                color2: {\r\n                    type: 'c',\r\n                    value: new THREE.Color('#283844')\r\n                }\r\n            },\r\n            depthTest: false\r\n        });\r\n        var mesh = new THREE.Mesh(geometry, material);\r\n        mesh.frustumCulled = false;\r\n        mesh.style = style;\r\n        if (opt)\r\n            mesh.style(opt);\r\n        return mesh;\r\n        function style(opt) {\r\n            opt = opt || {};\r\n            if (Array.isArray(opt.colors)) {\r\n                var colors = opt.colors.map(function (c) {\r\n                    if (typeof c === 'string' || typeof c === 'number') {\r\n                        return new THREE.Color(c);\r\n                    }\r\n                    return c;\r\n                });\r\n                material.uniforms.color1.value.copy(colors[0]);\r\n                material.uniforms.color2.value.copy(colors[1]);\r\n            }\r\n            if (typeof opt.aspect === 'number') {\r\n                material.uniforms.aspect.value = opt.aspect;\r\n            }\r\n            if (typeof opt.grainScale === 'number') {\r\n                material.uniforms.grainScale.value = opt.grainScale;\r\n            }\r\n            if (typeof opt.grainTime === 'number') {\r\n                material.uniforms.grainTime.value = opt.grainTime;\r\n            }\r\n            if (opt.smooth) {\r\n                var smooth = fromArray(opt.smooth, THREE.Vector2);\r\n                material.uniforms.smooth.value.copy(smooth);\r\n            }\r\n            if (opt.offset) {\r\n                var offset = fromArray(opt.offset, THREE.Vector2);\r\n                material.uniforms.offset.value.copy(offset);\r\n            }\r\n            if (typeof opt.noiseAlpha === 'number') {\r\n                material.uniforms.noiseAlpha.value = opt.noiseAlpha;\r\n            }\r\n            if (typeof opt.scale !== 'undefined') {\r\n                var scale = opt.scale;\r\n                if (typeof scale === 'number') {\r\n                    scale = [\r\n                        scale,\r\n                        scale\r\n                    ];\r\n                }\r\n                scale = fromArray(scale, THREE.Vector2);\r\n                material.uniforms.scale.value.copy(scale);\r\n            }\r\n            if (typeof opt.aspectCorrection !== 'undefined') {\r\n                material.uniforms.aspectCorrection.value = Boolean(opt.aspectCorrection);\r\n            }\r\n        }\r\n        function fromArray(array, VectorType) {\r\n            if (Array.isArray(array)) {\r\n                return new VectorType().fromArray(array);\r\n            }\r\n            return array;\r\n        }\r\n    }\r\n    return threegltviewer.vignettes = { createBackground };\r\n});\ndefine('skylark-threegltfviewer/Viewer',[\n    'skylark-threejs',\n    'skylark-threejs-ex/utils/stats',\n    'skylark-threejs-ex/loaders/GLTFLoader',\n    'skylark-threejs-ex/loaders/DRACOLoader',\n    'skylark-threejs-ex/controls/OrbitControls',\n    'skylark-threejs-ex/loaders/RGBELoader',\n    'skylark-datgui',\n    \"./threegltviewer\",\n    './environments',\n    './vignettes'\n], function (\n  THREE, \n  Stats, \n  GLTFLoader,\n  DRACOLoader, \n  OrbitControls, \n  RGBELoader, \n  datgui, \n  threegltviewer,\n  environments, \n  vignettes\n) {\n    'use strict';\n    const DEFAULT_CAMERA = '[default]';\n    const IS_IOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\n    const MAP_NAMES = [\n        'map',\n        'aoMap',\n        'emissiveMap',\n        'glossinessMap',\n        'metalnessMap',\n        'normalMap',\n        'roughnessMap',\n        'specularMap'\n    ];\n    const Preset = { ASSET_GENERATOR: 'assetgenerator' };\n    THREE.Cache.enabled = true;\n    class Viewer {\n        constructor(el, options) {\n            this.el = el;\n            this.options = options;\n            this.lights = [];\n            this.content = null;\n            this.mixer = null;\n            this.clips = [];\n            this.gui = null;\n            this.state = {\n                environment: options.preset === Preset.ASSET_GENERATOR ? environments.find(e => e.id === 'footprint-court').name : environments[1].name,\n                background: false,\n                playbackSpeed: 1,\n                actionStates: {},\n                camera: DEFAULT_CAMERA,\n                wireframe: false,\n                skeleton: false,\n                grid: false,\n                addLights: true,\n                exposure: 1,\n                textureEncoding: 'sRGB',\n                ambientIntensity: 0.3,\n                ambientColor: 16777215,\n                directIntensity: 0.8 * Math.PI,\n                directColor: 16777215,\n                bgColor1: '#ffffff',\n                bgColor2: '#353535'\n            };\n            this.prevTime = 0;\n            this.stats = new Stats();\n            this.stats.dom.height = '48px';\n            [].forEach.call(this.stats.dom.children, child => child.style.display = '');\n            this.scene = new THREE.Scene();\n            const fov = options.preset === Preset.ASSET_GENERATOR ? 0.8 * 180 / Math.PI : 60;\n            this.defaultCamera = new THREE.PerspectiveCamera(fov, el.clientWidth / el.clientHeight, 0.01, 1000);\n            this.activeCamera = this.defaultCamera;\n            this.scene.add(this.defaultCamera);\n            this.renderer = window.renderer = new THREE.WebGLRenderer({ antialias: true });\n            this.renderer.physicallyCorrectLights = true;\n            this.renderer.outputEncoding = THREE.sRGBEncoding;\n            this.renderer.setClearColor(13421772);\n            this.renderer.setPixelRatio(window.devicePixelRatio);\n            this.renderer.setSize(el.clientWidth, el.clientHeight);\n            this.pmremGenerator = new THREE.PMREMGenerator(this.renderer);\n            this.pmremGenerator.compileEquirectangularShader();\n            this.controls = new OrbitControls(this.defaultCamera, this.renderer.domElement);\n            this.controls.autoRotate = false;\n            this.controls.autoRotateSpeed = -10;\n            this.controls.screenSpacePanning = true;\n            this.vignette = vignettes.createBackground({\n                aspect: this.defaultCamera.aspect,\n                grainScale: IS_IOS ? 0 : 0.001,\n                colors: [\n                    this.state.bgColor1,\n                    this.state.bgColor2\n                ]\n            });\n            this.vignette.name = 'Vignette';\n            this.vignette.renderOrder = -1;\n            this.el.appendChild(this.renderer.domElement);\n            this.cameraCtrl = null;\n            this.cameraFolder = null;\n            this.animFolder = null;\n            this.animCtrls = [];\n            this.morphFolder = null;\n            this.morphCtrls = [];\n            this.skeletonHelpers = [];\n            this.gridHelper = null;\n            this.axesHelper = null;\n            this.addAxesHelper();\n            this.addGUI();\n            if (options.kiosk)\n                this.gui.close();\n            this.animate = this.animate.bind(this);\n            requestAnimationFrame(this.animate);\n            window.addEventListener('resize', this.resize.bind(this), false);\n        }\n\n        animate(time) {\n            requestAnimationFrame(this.animate);\n            const dt = (time - this.prevTime) / 1000;\n            this.controls.update();\n            this.stats.update();\n            this.mixer && this.mixer.update(dt);\n            this.render();\n            this.prevTime = time;\n        }\n\n        render() {\n            this.renderer.render(this.scene, this.activeCamera);\n            if (this.state.grid) {\n                this.axesCamera.position.copy(this.defaultCamera.position);\n                this.axesCamera.lookAt(this.axesScene.position);\n                this.axesRenderer.render(this.axesScene, this.axesCamera);\n            }\n        }\n\n        resize() {\n            const {clientHeight, clientWidth} = this.el.parentElement;\n            this.defaultCamera.aspect = clientWidth / clientHeight;\n            this.defaultCamera.updateProjectionMatrix();\n            this.vignette.style({ aspect: this.defaultCamera.aspect });\n            this.renderer.setSize(clientWidth, clientHeight);\n            this.axesCamera.aspect = this.axesDiv.clientWidth / this.axesDiv.clientHeight;\n            this.axesCamera.updateProjectionMatrix();\n            this.axesRenderer.setSize(this.axesDiv.clientWidth, this.axesDiv.clientHeight);\n        }\n\n        load(url, rootPath, assetMap) {\n            const baseURL = THREE.LoaderUtils.extractUrlBase(url);\n            return new Promise((resolve, reject) => {\n                const manager = new THREE.LoadingManager();\n                manager.setURLModifier((url, path) => {\n                    const normalizedURL = rootPath + decodeURI(url).replace(baseURL, '').replace(/^(\\.?\\/)/, '');\n                    if (assetMap.has(normalizedURL)) {\n                        const blob = assetMap.get(normalizedURL);\n                        const blobURL = URL.createObjectURL(blob);\n                        blobURLs.push(blobURL);\n                        return blobURL;\n                    }\n                    return (path || '') + url;\n                });\n                const loader = new b.GLTFLoader(manager);\n                loader.setCrossOrigin('anonymous');\n                const dracoLoader = new c.DRACOLoader();\n                dracoLoader.setDecoderPath('assets/draco/');\n                loader.setDRACOLoader(dracoLoader);\n                const blobURLs = [];\n                loader.load(url, gltf => {\n                    const scene = gltf.scene || gltf.scenes[0];\n                    const clips = gltf.animations || [];\n                    if (!scene) {\n                        throw new Error('This model contains no scene, and cannot be viewed here. However,' + ' it may contain individual 3D resources.');\n                    }\n                    this.setContent(scene, clips);\n                    blobURLs.forEach(URL.revokeObjectURL);\n                    resolve(gltf);\n                }, undefined, reject);\n            });\n        }\n\n        setContent(object, clips) {\n            this.clear();\n            const box = new THREE.Box3().setFromObject(object);\n            const size = box.getSize(new THREE.Vector3()).length();\n            const center = box.getCenter(new THREE.Vector3());\n            this.controls.reset();\n            object.position.x += object.position.x - center.x;\n            object.position.y += object.position.y - center.y;\n            object.position.z += object.position.z - center.z;\n            this.controls.maxDistance = size * 10;\n            this.defaultCamera.near = size / 100;\n            this.defaultCamera.far = size * 100;\n            this.defaultCamera.updateProjectionMatrix();\n            if (this.options.cameraPosition) {\n                this.defaultCamera.position.fromArray(this.options.cameraPosition);\n                this.defaultCamera.lookAt(new THREE.Vector3());\n            } else {\n                this.defaultCamera.position.copy(center);\n                this.defaultCamera.position.x += size / 2;\n                this.defaultCamera.position.y += size / 5;\n                this.defaultCamera.position.z += size / 2;\n                this.defaultCamera.lookAt(center);\n            }\n            this.setCamera(DEFAULT_CAMERA);\n            this.axesCamera.position.copy(this.defaultCamera.position);\n            this.axesCamera.lookAt(this.axesScene.position);\n            this.axesCamera.near = size / 100;\n            this.axesCamera.far = size * 100;\n            this.axesCamera.updateProjectionMatrix();\n            this.axesCorner.scale.set(size, size, size);\n            this.controls.saveState();\n            this.scene.add(object);\n            this.content = object;\n            this.state.addLights = true;\n            this.content.traverse(node => {\n                if (node.isLight) {\n                    this.state.addLights = false;\n                } else if (node.isMesh) {\n                    node.material.depthWrite = !node.material.transparent;\n                }\n            });\n            this.setClips(clips);\n            this.updateLights();\n            this.updateGUI();\n            this.updateEnvironment();\n            this.updateTextureEncoding();\n            this.updateDisplay();\n            window.content = this.content;\n            console.info('[glTF Viewer] THREE.Scene exported as `window.content`.');\n            this.printGraph(this.content);\n        }\n\n        printGraph(node) {\n            console.group(' <' + node.type + '> ' + node.name);\n            node.children.forEach(child => this.printGraph(child));\n            console.groupEnd();\n        }\n\n        setClips(clips) {\n            if (this.mixer) {\n                this.mixer.stopAllAction();\n                this.mixer.uncacheRoot(this.mixer.getRoot());\n                this.mixer = null;\n            }\n            this.clips = clips;\n            if (!clips.length)\n                return;\n            this.mixer = new THREE.AnimationMixer(this.content);\n        }\n\n        playAllClips() {\n            this.clips.forEach(clip => {\n                this.mixer.clipAction(clip).reset().play();\n                this.state.actionStates[clip.name] = true;\n            });\n        }\n\n        setCamera(name) {\n            if (name === DEFAULT_CAMERA) {\n                this.controls.enabled = true;\n                this.activeCamera = this.defaultCamera;\n            } else {\n                this.controls.enabled = false;\n                this.content.traverse(node => {\n                    if (node.isCamera && node.name === name) {\n                        this.activeCamera = node;\n                    }\n                });\n            }\n        }\n\n        updateTextureEncoding() {\n            const encoding = this.state.textureEncoding === 'sRGB' ? THREE.sRGBEncoding : THREE.LinearEncoding;\n            traverseMaterials(this.content, material => {\n                if (material.map)\n                    material.map.encoding = encoding;\n                if (material.emissiveMap)\n                    material.emissiveMap.encoding = encoding;\n                if (material.map || material.emissiveMap)\n                    material.needsUpdate = true;\n            });\n        }\n\n        updateLights() {\n            const state = this.state;\n            const lights = this.lights;\n            if (state.addLights && !lights.length) {\n                this.addLights();\n            } else if (!state.addLights && lights.length) {\n                this.removeLights();\n            }\n            this.renderer.toneMappingExposure = state.exposure;\n            if (lights.length === 2) {\n                lights[0].intensity = state.ambientIntensity;\n                lights[0].color.setHex(state.ambientColor);\n                lights[1].intensity = state.directIntensity;\n                lights[1].color.setHex(state.directColor);\n            }\n        }\n\n        addLights() {\n            const state = this.state;\n            if (this.options.preset === Preset.ASSET_GENERATOR) {\n                const hemiLight = new THREE.HemisphereLight();\n                hemiLight.name = 'hemi_light';\n                this.scene.add(hemiLight);\n                this.lights.push(hemiLight);\n                return;\n            }\n            const light1 = new THREE.AmbientLight(state.ambientColor, state.ambientIntensity);\n            light1.name = 'ambient_light';\n            this.defaultCamera.add(light1);\n            const light2 = new THREE.DirectionalLight(state.directColor, state.directIntensity);\n            light2.position.set(0.5, 0, 0.866);\n            light2.name = 'main_light';\n            this.defaultCamera.add(light2);\n            this.lights.push(light1, light2);\n        }\n\n        removeLights() {\n            this.lights.forEach(light => light.parent.remove(light));\n            this.lights.length = 0;\n        }\n\n        updateEnvironment() {\n            const environment = g.environments.filter(entry => entry.name === this.state.environment)[0];\n            this.getCubeMapTexture(environment).then(({envMap}) => {\n                if ((!envMap || !this.state.background) && this.activeCamera === this.defaultCamera) {\n                    this.scene.add(this.vignette);\n                } else {\n                    this.scene.remove(this.vignette);\n                }\n                this.scene.environment = envMap;\n                this.scene.background = this.state.background ? envMap : null;\n            });\n        }\n\n        getCubeMapTexture(environment) {\n            const {path} = environment;\n            if (!path)\n                return Promise.resolve({ envMap: null });\n            return new Promise((resolve, reject) => {\n                new e.RGBELoader().setDataType(THREE.UnsignedByteType).load(path, texture => {\n                    const envMap = this.pmremGenerator.fromEquirectangular(texture).texture;\n                    this.pmremGenerator.dispose();\n                    resolve({ envMap });\n                }, undefined, reject);\n            });\n        }\n\n        updateDisplay() {\n            if (this.skeletonHelpers.length) {\n                this.skeletonHelpers.forEach(helper => this.scene.remove(helper));\n            }\n            traverseMaterials(this.content, material => {\n                material.wireframe = this.state.wireframe;\n            });\n            this.content.traverse(node => {\n                if (node.isMesh && node.skeleton && this.state.skeleton) {\n                    const helper = new THREE.SkeletonHelper(node.skeleton.bones[0].parent);\n                    helper.material.linewidth = 3;\n                    this.scene.add(helper);\n                    this.skeletonHelpers.push(helper);\n                }\n            });\n            if (this.state.grid !== Boolean(this.gridHelper)) {\n                if (this.state.grid) {\n                    this.gridHelper = new THREE.GridHelper();\n                    this.axesHelper = new THREE.AxesHelper();\n                    this.axesHelper.renderOrder = 999;\n                    this.axesHelper.onBeforeRender = renderer => renderer.clearDepth();\n                    this.scene.add(this.gridHelper);\n                    this.scene.add(this.axesHelper);\n                } else {\n                    this.scene.remove(this.gridHelper);\n                    this.scene.remove(this.axesHelper);\n                    this.gridHelper = null;\n                    this.axesHelper = null;\n                    this.axesRenderer.clear();\n                }\n            }\n        }\n\n        updateBackground() {\n            this.vignette.style({\n                colors: [\n                    this.state.bgColor1,\n                    this.state.bgColor2\n                ]\n            });\n        }\n\n        addAxesHelper() {\n            this.axesDiv = document.createElement('div');\n            this.el.appendChild(this.axesDiv);\n            this.axesDiv.classList.add('axes');\n            const {clientWidth, clientHeight} = this.axesDiv;\n            this.axesScene = new THREE.Scene();\n            this.axesCamera = new THREE.PerspectiveCamera(50, clientWidth / clientHeight, 0.1, 10);\n            this.axesScene.add(this.axesCamera);\n            this.axesRenderer = new THREE.WebGLRenderer({ alpha: true });\n            this.axesRenderer.setPixelRatio(window.devicePixelRatio);\n            this.axesRenderer.setSize(this.axesDiv.clientWidth, this.axesDiv.clientHeight);\n            this.axesCamera.up = this.defaultCamera.up;\n            this.axesCorner = new THREE.AxesHelper(5);\n            this.axesScene.add(this.axesCorner);\n            this.axesDiv.appendChild(this.axesRenderer.domElement);\n        }\n\n        addGUI() {\n            const gui = this.gui = new datgui({\n                autoPlace: false,\n                width: 260,\n                hideable: true\n            });\n            const dispFolder = gui.addFolder('Display');\n            const envBackgroundCtrl = dispFolder.add(this.state, 'background');\n            envBackgroundCtrl.onChange(() => this.updateEnvironment());\n            const wireframeCtrl = dispFolder.add(this.state, 'wireframe');\n            wireframeCtrl.onChange(() => this.updateDisplay());\n            const skeletonCtrl = dispFolder.add(this.state, 'skeleton');\n            skeletonCtrl.onChange(() => this.updateDisplay());\n            const gridCtrl = dispFolder.add(this.state, 'grid');\n            gridCtrl.onChange(() => this.updateDisplay());\n            dispFolder.add(this.controls, 'autoRotate');\n            dispFolder.add(this.controls, 'screenSpacePanning');\n            const bgColor1Ctrl = dispFolder.addColor(this.state, 'bgColor1');\n            const bgColor2Ctrl = dispFolder.addColor(this.state, 'bgColor2');\n            bgColor1Ctrl.onChange(() => this.updateBackground());\n            bgColor2Ctrl.onChange(() => this.updateBackground());\n            const lightFolder = gui.addFolder('Lighting');\n            const encodingCtrl = lightFolder.add(this.state, 'textureEncoding', [\n                'sRGB',\n                'Linear'\n            ]);\n            encodingCtrl.onChange(() => this.updateTextureEncoding());\n            lightFolder.add(this.renderer, 'outputEncoding', {\n                sRGB: THREE.sRGBEncoding,\n                Linear: THREE.LinearEncoding\n            }).onChange(() => {\n                this.renderer.outputEncoding = Number(this.renderer.outputEncoding);\n                traverseMaterials(this.content, material => {\n                    material.needsUpdate = true;\n                });\n            });\n            const envMapCtrl = lightFolder.add(this.state, 'environment', g.environments.map(env => env.name));\n            envMapCtrl.onChange(() => this.updateEnvironment());\n            [\n                lightFolder.add(this.state, 'exposure', 0, 2),\n                lightFolder.add(this.state, 'addLights').listen(),\n                lightFolder.add(this.state, 'ambientIntensity', 0, 2),\n                lightFolder.addColor(this.state, 'ambientColor'),\n                lightFolder.add(this.state, 'directIntensity', 0, 4),\n                lightFolder.addColor(this.state, 'directColor')\n            ].forEach(ctrl => ctrl.onChange(() => this.updateLights()));\n            this.animFolder = gui.addFolder('Animation');\n            this.animFolder.domElement.style.display = 'none';\n            const playbackSpeedCtrl = this.animFolder.add(this.state, 'playbackSpeed', 0, 1);\n            playbackSpeedCtrl.onChange(speed => {\n                if (this.mixer)\n                    this.mixer.timeScale = speed;\n            });\n            this.animFolder.add({ playAll: () => this.playAllClips() }, 'playAll');\n            this.morphFolder = gui.addFolder('Morph Targets');\n            this.morphFolder.domElement.style.display = 'none';\n            this.cameraFolder = gui.addFolder('Cameras');\n            this.cameraFolder.domElement.style.display = 'none';\n            const perfFolder = gui.addFolder('Performance');\n            const perfLi = document.createElement('li');\n            this.stats.dom.style.position = 'static';\n            perfLi.appendChild(this.stats.dom);\n            perfLi.classList.add('gui-stats');\n            perfFolder.__ul.appendChild(perfLi);\n            const guiWrap = document.createElement('div');\n            this.el.appendChild(guiWrap);\n            guiWrap.classList.add('gui-wrap');\n            guiWrap.appendChild(gui.domElement);\n            gui.open();\n        }\n\n        updateGUI() {\n            this.cameraFolder.domElement.style.display = 'none';\n            this.morphCtrls.forEach(ctrl => ctrl.remove());\n            this.morphCtrls.length = 0;\n            this.morphFolder.domElement.style.display = 'none';\n            this.animCtrls.forEach(ctrl => ctrl.remove());\n            this.animCtrls.length = 0;\n            this.animFolder.domElement.style.display = 'none';\n            const cameraNames = [];\n            const morphMeshes = [];\n            this.content.traverse(node => {\n                if (node.isMesh && node.morphTargetInfluences) {\n                    morphMeshes.push(node);\n                }\n                if (node.isCamera) {\n                    node.name = node.name || `VIEWER__camera_${ cameraNames.length + 1 }`;\n                    cameraNames.push(node.name);\n                }\n            });\n            if (cameraNames.length) {\n                this.cameraFolder.domElement.style.display = '';\n                if (this.cameraCtrl)\n                    this.cameraCtrl.remove();\n                const cameraOptions = [DEFAULT_CAMERA].concat(cameraNames);\n                this.cameraCtrl = this.cameraFolder.add(this.state, 'camera', cameraOptions);\n                this.cameraCtrl.onChange(name => this.setCamera(name));\n            }\n            if (morphMeshes.length) {\n                this.morphFolder.domElement.style.display = '';\n                morphMeshes.forEach(mesh => {\n                    if (mesh.morphTargetInfluences.length) {\n                        const nameCtrl = this.morphFolder.add({ name: mesh.name || 'Untitled' }, 'name');\n                        this.morphCtrls.push(nameCtrl);\n                    }\n                    for (let i = 0; i < mesh.morphTargetInfluences.length; i++) {\n                        const ctrl = this.morphFolder.add(mesh.morphTargetInfluences, i, 0, 1, 0.01).listen();\n                        Object.keys(mesh.morphTargetDictionary).forEach(key => {\n                            if (key && mesh.morphTargetDictionary[key] === i)\n                                ctrl.name(key);\n                        });\n                        this.morphCtrls.push(ctrl);\n                    }\n                });\n            }\n            if (this.clips.length) {\n                this.animFolder.domElement.style.display = '';\n                const actionStates = this.state.actionStates = {};\n                this.clips.forEach((clip, clipIndex) => {\n                    let action;\n                    if (clipIndex === 0) {\n                        actionStates[clip.name] = true;\n                        action = this.mixer.clipAction(clip);\n                        action.play();\n                    } else {\n                        actionStates[clip.name] = false;\n                    }\n                    const ctrl = this.animFolder.add(actionStates, clip.name).listen();\n                    ctrl.onChange(playAnimation => {\n                        action = action || this.mixer.clipAction(clip);\n                        action.setEffectiveTimeScale(1);\n                        playAnimation ? action.play() : action.stop();\n                    });\n                    this.animCtrls.push(ctrl);\n                });\n            }\n        }\n        clear() {\n            if (!this.content)\n                return;\n            this.scene.remove(this.content);\n            this.content.traverse(node => {\n                if (!node.isMesh)\n                    return;\n                node.geometry.dispose();\n            });\n            traverseMaterials(this.content, material => {\n                MAP_NAMES.forEach(map => {\n                    if (material[map])\n                        material[map].dispose();\n                });\n            });\n        }\n    } ;\n\n    function traverseMaterials(object, callback) {\n        object.traverse(node => {\n            if (!node.isMesh)\n                return;\n            const materials = Array.isArray(node.material) ? node.material : [node.material];\n            materials.forEach(callback);\n        });\n    }\n\n    return Viewer;\n});\ndefine('skylark-threegltfviewer/SimpleDropzone',[\r\n\t\"skylark-langx-emitter\",\r\n\t\"skylark-jszip\",\r\n\t\"./threegltviewer\"\r\n],function(Emitter,jszip,threegltviewer) {\r\n\t//import ZipLoader from 'zip-loader';\r\n\r\n\t/**\r\n\t * Watches an element for file drops, parses to create a filemap hierarchy,\r\n\t * and emits the result.\r\n\t */\r\n\tclass SimpleDropzone {\r\n\r\n\t  /**\r\n\t   * @param  {Element} el\r\n\t   * @param  {Element} inputEl\r\n\t   */\r\n\t  constructor (el, inputEl) {\r\n\t    this.el = el;\r\n\t    this.inputEl = inputEl;\r\n\r\n\t    this.listeners = {\r\n\t      drop: [],\r\n\t      dropstart: [],\r\n\t      droperror: []\r\n\t    };\r\n\r\n\t    this._onDragover = this._onDragover.bind(this);\r\n\t    this._onDrop = this._onDrop.bind(this);\r\n\t    this._onSelect = this._onSelect.bind(this);\r\n\r\n\t    el.addEventListener('dragover', this._onDragover, false);\r\n\t    el.addEventListener('drop', this._onDrop, false);\r\n\t    inputEl.addEventListener('change', this._onSelect);\r\n\t  }\r\n\r\n\t  /**\r\n\t   * @param  {string}   type\r\n\t   * @param  {Function} callback\r\n\t   * @return {SimpleDropzone}\r\n\t   */\r\n\t  on (type, callback) {\r\n\t    this.listeners[type].push(callback);\r\n\t    return this;\r\n\t  }\r\n\r\n\t  /**\r\n\t   * @param  {string} type\r\n\t   * @param  {Object} data\r\n\t   * @return {SimpleDropzone}\r\n\t   */\r\n\t  _emit (type, data) {\r\n\t    this.listeners[type]\r\n\t      .forEach((callback) => callback(data));\r\n\t    return this;\r\n\t  }\r\n\r\n\t  /**\r\n\t   * Destroys the instance.\r\n\t   */\r\n\t  destroy () {\r\n\t    const el = this.el;\r\n\t    const inputEl = this.inputEl;\r\n\r\n\t    el.removeEventListener(this._onDragover);\r\n\t    el.removeEventListener(this._onDrop);\r\n\t    inputEl.removeEventListener(this._onSelect);\r\n\r\n\t    delete this.el;\r\n\t    delete this.inputEl;\r\n\t    delete this.listeners;\r\n\t  }\r\n\r\n\t  /**\r\n\t   * @param  {Event} e\r\n\t   */\r\n\t  _onDrop (e) {\r\n\t    e.stopPropagation();\r\n\t    e.preventDefault();\r\n\r\n\t    this._emit('dropstart');\r\n\r\n\t    let entries;\r\n\t    if (e.dataTransfer.items) {\r\n\t      entries = [].slice.call(e.dataTransfer.items)\r\n\t        .map((item) => item.webkitGetAsEntry());\r\n\t    } else if ((e.dataTransfer.files||[]).length === 1) {\r\n\t      const file = e.dataTransfer.files[0];\r\n\t      if (this._isZip(file)) {\r\n\t        this._loadZip(file);\r\n\t        return;\r\n\t      } else {\r\n\t        this._emit('drop', {files: new Map([[file.name, file]])});\r\n\t        return;\r\n\t      }\r\n\t    }\r\n\r\n\t    if (!entries) {\r\n\t      this._fail('Required drag-and-drop APIs are not supported in this browser.');\r\n\t    }\r\n\r\n\t    if (entries.length === 1 && entries[0].name.match(/\\.zip$/)) {\r\n\t      entries[0].file((file) => this._loadZip(file));\r\n\t    } else {\r\n\t      this._loadNextEntry(new Map(), entries);\r\n\t    }\r\n\t  }\r\n\r\n\t  /**\r\n\t   * @param  {Event} e\r\n\t   */\r\n\t  _onDragover (e) {\r\n\t    e.stopPropagation();\r\n\t    e.preventDefault();\r\n\t    e.dataTransfer.dropEffect = 'copy'; // Explicitly show this is a copy.\r\n\t  }\r\n\r\n\t  /**\r\n\t   * @param  {Event} e\r\n\t   */\r\n\t  _onSelect (e) {\r\n\t    this._emit('dropstart');\r\n\r\n\t    // HTML file inputs do not seem to support folders, so assume this is a flat file list.\r\n\t    const files = [].slice.call(this.inputEl.files);\r\n\r\n\t    // Automatically decompress a zip archive if it is the only file given.\r\n\t    if (files.length === 1 && this._isZip(files[0])) {\r\n\t      this._loadZip(files[0]);\r\n\t      return;\r\n\t    }\r\n\r\n\t    const fileMap = new Map();\r\n\t    files.forEach((file) => fileMap.set(file.name, file));\r\n\t    this._emit('drop', {files: fileMap});\r\n\t  }\r\n\r\n\t  /**\r\n\t   * Iterates through a list of FileSystemEntry objects, creates the fileMap\r\n\t   * tree, and emits the result.\r\n\t   * @param  {Map<string, File>} fileMap\r\n\t   * @param  {Array<FileSystemEntry>} entries\r\n\t   */\r\n\t  _loadNextEntry (fileMap, entries) {\r\n\t    const entry = entries.pop();\r\n\r\n\t    if (!entry) {\r\n\t      this._emit('drop', {files: fileMap});\r\n\t      return;\r\n\t    }\r\n\r\n\t    if (entry.isFile) {\r\n\t      entry.file((file) => {\r\n\t        fileMap.set(entry.fullPath, file);\r\n\t        this._loadNextEntry(fileMap, entries);\r\n\t      }, () => console.error('Could not load file: %s', entry.fullPath));\r\n\t    } else if (entry.isDirectory) {\r\n\t      // readEntries() must be called repeatedly until it stops returning results.\r\n\t      // https://www.w3.org/TR/2012/WD-file-system-api-20120417/#the-directoryreader-interface\r\n\t      // https://bugs.chromium.org/p/chromium/issues/detail?id=378883\r\n\t      const reader = entry.createReader();\r\n\t      const readerCallback = (newEntries) => {\r\n\t        if (newEntries.length) {\r\n\t          entries = entries.concat(newEntries);\r\n\t          reader.readEntries(readerCallback);\r\n\t        } else {\r\n\t          this._loadNextEntry(fileMap, entries);\r\n\t        }\r\n\t      };\r\n\t      reader.readEntries(readerCallback);\r\n\t    } else {\r\n\t      console.warn('Unknown asset type: ' + entry.fullPath);\r\n\t      this._loadNextEntry(fileMap, entries);\r\n\t    }\r\n\t  }\r\n\r\n\t  /**\r\n\t   * Inflates a File in .ZIP format, creates the fileMap tree, and emits the\r\n\t   * result.\r\n\t   * @param  {File} file\r\n\t   */\r\n\t  _loadZip (file) {\r\n\t    const pending = [];\r\n\t    const fileMap = new Map();\r\n\r\n\t    const traverse = (node) => {\r\n\t      if (node.directory) {\r\n\t        node.children.forEach(traverse);\r\n\t      } else if (node.name[0] !== '.') {\r\n\t        pending.push(new Promise((resolve) => {\r\n\t          node.getData(new zip.BlobWriter(), (blob) => {\r\n\t            blob.name = node.name;\r\n\t            fileMap.set(node.getFullname(), blob);\r\n\t            resolve();\r\n\t          });\r\n\t        }));\r\n\t      }\r\n\t    };\r\n\r\n\t    ZipLoader.unzip(file).then((archive) => {\r\n\t      Object.keys(archive.files).forEach((path) => {\r\n\t        if (path.match(/\\/$/)) return;\r\n\t        const fileName = path.replace(/^.*[\\\\\\/]/, '');\r\n\t        fileMap.set(path, new File([archive.files[path].buffer], fileName));\r\n\t      });\r\n\t      this._emit('drop', {files: fileMap, archive: file});\r\n\t    });\r\n\t  }\r\n\r\n\t  /**\r\n\t   * @param  {File} file\r\n\t   * @return {Boolean}\r\n\t   */\r\n\t  _isZip (file) {\r\n\t    return file.type === 'application/zip' || file.name.match(/\\.zip$/);\r\n\t  }\r\n\r\n\t  /**\r\n\t   * @param {string} message\r\n\t   * @throws\r\n\t   */\r\n\t  _fail (message) {\r\n\t    this._emit('droperror', {message: message});\r\n\t  }\r\n\t}\r\n\r\n\treturn threegltviewer.SimpleDropzone = SimpleDropzone;\r\n\r\n});\r\n\r\n \ndefine('skylark-threegltfviewer/App',[\n    'skylark-threejs-ex/WebGL',\n    \"./threegltviewer\",\n    './Viewer',\n    './SimpleDropzone'\n], function (WebGL, threegltviewer,Viewer, SimpleDropzone) {\n    'use strict';\n    \n    class App {\n        constructor(el, location) {\n            //const hash = location.hash ? queryString.parse(location.hash) : {};\n            const hash = {};\n            this.options = {\n                kiosk: Boolean(hash.kiosk),\n                model: hash.model || '',\n                preset: hash.preset || '',\n                cameraPosition: hash.cameraPosition ? hash.cameraPosition.split(',').map(Number) : null\n            };\n            this.el = el;\n            this.viewer = null;\n            this.viewerEl = null;\n            this.spinnerEl = el.querySelector('.spinner');\n            this.dropEl = el.querySelector('.dropzone');\n            this.inputEl = el.querySelector('#file-input');\n            //this.validationCtrl = new Validation(el);\n            this.createDropzone();\n            this.hideSpinner();\n            const options = this.options;\n            if (options.kiosk) {\n                const headerEl = document.querySelector('header');\n                headerEl.style.display = 'none';\n            }\n            if (options.model) {\n                this.view(options.model, '', new Map());\n            }\n        }\n\n        createDropzone() {\n            const dropCtrl = new SimpleDropzone(this.dropEl, this.inputEl);\n            dropCtrl.on('drop', ({files}) => this.load(files));\n            dropCtrl.on('dropstart', () => this.showSpinner());\n            dropCtrl.on('droperror', () => this.hideSpinner());\n        }\n\n        createViewer() {\n            this.viewerEl = document.createElement('div');\n            this.viewerEl.classList.add('viewer');\n            this.dropEl.innerHTML = '';\n            this.dropEl.appendChild(this.viewerEl);\n            this.viewer = new Viewer(this.viewerEl, this.options);\n            return this.viewer;\n        }\n\n        load(fileMap) {\n            let rootFile;\n            let rootPath;\n            Array.from(fileMap).forEach(([path, file]) => {\n                if (file.name.match(/\\.(gltf|glb)$/)) {\n                    rootFile = file;\n                    rootPath = path.replace(file.name, '');\n                }\n            });\n            if (!rootFile) {\n                this.onError('No .gltf or .glb asset found.');\n            }\n            this.view(rootFile, rootPath, fileMap);\n        }\n\n        view(rootFile, rootPath, fileMap) {\n            if (this.viewer)\n                this.viewer.clear();\n            const viewer = this.viewer || this.createViewer();\n            const fileURL = typeof rootFile === 'string' ? rootFile : URL.createObjectURL(rootFile);\n            const cleanup = () => {\n                this.hideSpinner();\n                if (typeof rootFile === 'object')\n                    URL.revokeObjectURL(fileURL);\n            };\n            viewer.load(fileURL, rootPath, fileMap).catch(e => this.onError(e)).then(gltf => {\n                //if (!this.options.kiosk) {\n                //    this.validationCtrl.validate(fileURL, rootPath, fileMap, gltf);\n                //}\n                cleanup();\n            });\n        }\n\n        onError(error) {\n            let message = (error || {}).message || error.toString();\n            if (message.match(/ProgressEvent/)) {\n                message = 'Unable to retrieve this file. Check JS console and browser network tab.';\n            } else if (message.match(/Unexpected token/)) {\n                message = `Unable to parse file content. Verify that this file is valid. Error: \"${ message }\"`;\n            } else if (error && error.target && error.target instanceof Image) {\n                message = 'Missing texture: ' + error.target.src.split('/').pop();\n            }\n            window.alert(message);\n            console.error(error);\n        }\n\n        showSpinner() {\n            this.spinnerEl.style.display = '';\n        }\n\n        hideSpinner() {\n            this.spinnerEl.style.display = 'none';\n        }\n    }\n\n    return threegltviewer.App = App;\n});\ndefine('skylark-threegltfviewer/main',[\r\n\t\"./threegltviewer\",\r\n\t\"./App\"\r\n],function(threegltviewer){\r\n\treturn threegltviewer;\r\n});\ndefine('skylark-threegltfviewer', ['skylark-threegltfviewer/main'], function (main) { return main; });\n\n"]}